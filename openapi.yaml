openapi: 3.0.3
info:
  title: Nova Trade API
  version: "1.0.0"
  description: |
    HTTP+JSON API for Nova Trade.

    - Base URL in dev: `http://nova-api.sgusd.io`
    - Versioned API root: `/api/v1`
    - Auth: Bearer JWT (`Authorization: Bearer <token>`)
    - Error shape: `{ "error": "message" }`
    - Some endpoints return `{ "ok": true }` on success.

    ### Company wallet addresses (temporary fixed pool)
    Super admin must assign one of these addresses when creating a company. Each address is unique across companies.
    ```
    0x9018c44fdb8d7ddcef398285512586903d3acd11
    0x5b2e155495d2ca3fc4bb13088d77b8b15341f2d7
    0xfdc55438146f0cc7fccab36948c426f95feee4d1
    ```

    ### Pagination
    All list/search endpoints support pagination.

    - Query params:
      - `page` (integer, 1-based; default **1**)
      - `page_size` (integer; default **20**, max **100**)
    - Response headers:
      - `X-Total-Count`: total items matching the filter
      - `X-Page`: current page (1-based)
      - `X-Page-Size`: page size used
      - `X-Total-Pages`: total number of pages
      - `Link`: RFC 5988 pagination links (when applicable), e.g.
        `<.../orders?page=2&page_size=20>; rel="next", <.../orders?page=10&page_size=20>; rel="last"`

    Notes:
    - If `page` exceeds the last page, the array may be empty.
    - If `page_size` is greater than the server maximum, it may be clamped.

servers:
  - url: http://nova-api.sgusd.io

tags:
  - name: Health
  - name: Auth
  - name: Companies
  - name: Users
  - name: Partners
  - name: Orders
  - name: Attachments
  - name: Wallets
  - name: Dashboard
  - name: Notifications
  - name: LC Release
  - name: Meta
  - name: Transactions

security:
  - BearerAuth: []

paths:
  /health:
    get:
      tags: [Health]
      summary: Liveness/health
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }

  /api/v1/enums:
    get:
      tags: [Meta]
      summary: Enumerations for UI (public)
      description: |
        Returns labeled candidate values (value/label/label_zh/description) for roles, user status,
        order types & statuses, trade types, and LC Release list statuses.
      security: []
      responses:
        "200":
          description: Enum candidates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnumsResponse"
              examples:
                example:
                  value:
                    roles:
                      - value: super_admin
                        label: Super Admin
                        label_zh: 超级管理员
                        description: Platform-wide; creates companies/admins; performs LC platform confirmation.
                    user_status:
                      - value: pending_activation
                        label: Pending Activation
                        label_zh: 待激活
                    order_types:
                      - value: payment
                        label: Payment / Remittance
                        label_zh: 支付汇款
                      - value: onchain_lc
                        label: On-chain LC
                        label_zh: 链上信用证
                      - value: collection
                        label: Collection (Receipt)
                        label_zh: 收款
                    order_status:
                      - value: pending_submission
                        label: Pending Submission
                        label_zh: 待提交
                      - value: pending_l2_approval
                        label: Pending L2 Approval
                        label_zh: 待二级审批
                      - value: pending_l1_approval
                        label: Pending L1 Approval
                        label_zh: 待一级审批
                      - value: pending_payment
                        label: Pending Payment
                        label_zh: 待付款
                      - value: pending_release
                        label: Pending Release (LC)
                        label_zh: 待放款流程
                      - value: submitted
                        label: Submitted (Collection)
                        label_zh: 已提交收款
                      - value: payment_received
                        label: Payment Received (Collection)
                        label_zh: 付款完成
                      - value: payment_completed
                        label: Payment Completed
                        label_zh: 付款完成
                      - value: order_closed
                        label: Order Closed
                        label_zh: 提单关闭
                    trade_types:
                      - value: iron_ore
                        label: Iron Ore
                        label_zh: 铁矿石
                    lc_release_status:
                      - value: await_seller_confirm
                        label: Await Seller Confirmation
                        label_zh: 待卖方确认发货

  /api/v1/auth/me:
    get:
      tags: [Auth]
      summary: Get current user ("me")
      description: |
        Returns the currently authenticated user's basic profile for session bootstrap.
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401": { $ref: "#/components/responses/Unauthorized" }
        "400": { $ref: "#/components/responses/BadRequest" }

  /api/v1/auth/login:
    post:
      tags: [Auth]
      summary: Login
      description: |
        - On success, returns a token.
        - If `need_activation=true`, the token is short-lived and intended for activation calls.
        - If `need_activation=false`, the token is a normal session token.
        - Returns `role` and `company_id` in both flows for immediate personalization (`company_id` is `null` for `super_admin`).
        - Includes a `session` nonce in both flows; use it to scope session-only actions (e.g., dismissing To-Dos).
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"
              examples:
                normal:
                  summary: Normal login
                  value:
                    need_activation: false
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    session: "bf4e0f1b9c7a427d9f24b5b9c1a2d3e4"
                    role: company_admin
                    company_id: 12
                need_activation:
                  summary: Login requires activation
                  value:
                    need_activation: true
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." # short-lived
                    session: "1d3a7c2e8f904a7d8b3e4f1c0a9b2c3d"
                    role: operator
                    company_id: 12
        "401": { $ref: "#/components/responses/Unauthorized" }
        "400": { $ref: "#/components/responses/BadRequest" }

  /api/v1/auth/init-activation:
    post:
      tags: [Auth]
      summary: Init activation (provision or return TOTP secret)
      description: |
        Idempotently provisions Google Authenticator (TOTP) for the authenticated user.

        - Returns both the Base32 `totp_secret` and the `otpauth_url` used to generate a QR.
        - If the user already has a secret, returns the existing secret and a reconstructed `otpauth_url`.
        - Use the returned `otpauth_url` to render a QR on the frontend or call `/auth/totp-qr` for a PNG.
      responses:
        "200":
          description: Provisioning info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitActivationResponse"
              examples:
                example:
                  value:
                    totp_secret: "JBSWY3DPEHPK3PXP"
                    otpauth_url: "otpauth://totp/NOVA%20TRADE:alice?secret=JBSWY3DPEHPK3PXP&issuer=NOVA%20TRADE&algorithm=SHA1&digits=6&period=30"
                    issuer: "NOVA TRADE"
                    account: "alice"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/auth/totp-qr:
    get:
      tags: [Auth]
      summary: TOTP provisioning QR (PNG)
      description: |
        Convenience endpoint that returns a PNG QR for the current user's `otpauth_url`.
        Under the hood it behaves like `/auth/init-activation` (idempotent; does not rotate the secret).
      parameters:
        - in: query
          name: size
          description: PNG width/height in pixels (min 128, max 1024). Defaults to 256.
          required: false
          schema:
            type: integer
            minimum: 128
            maximum: 1024
            default: 256
      responses:
        "200":
          description: PNG image with the QR code
          content:
            image/png:
              schema:
                type: string
                format: binary
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/auth/activate:
    post:
      tags: [Auth]
      summary: Complete activation (set password & email, verify TOTP)
      description: |
        Validates the provided 6-digit TOTP code against the bound secret and sets the user's password and email.
        On success returns a normal long-lived login token, plus the user's `role` and `company_id`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivateRequest"
            examples:
              example:
                value:
                  new_password: "Strong#Pass1"
                  email: "alice@example.com"
                  totp_code: "123456"
      responses:
        "200":
          description: Normal login token after activation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"
              examples:
                example:
                  summary: Activated
                  value:
                    need_activation: false
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    role: company_admin
                    company_id: 12
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/companies:
    post:
      tags: [Companies]
      summary: Create company (super admin)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateCompanyInput" }
            examples:
              sample:
                summary: Minimal example
                value:
                  name: "Acme Ltd"
                  admin: "acme_admin"
                  admin_real_name: "Alice Zhang"
                  contact: "ops@acme.example"
                  address: "0x9018c44fdb8d7ddcef398285512586903d3acd11"
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  company: { $ref: "#/components/schemas/Company" }
                  admin: { $ref: "#/components/schemas/User" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    get:
      tags: [Companies]
      summary: Search companies
      description: |
        View access requires one of the following roles: **super_admin**, **company_admin**, **operator**, **finance**.

        Text filters are case-insensitive and fuzzy (`ILIKE`). All non-empty filters are combined with **AND**.

        **Note:** This endpoint returns `CompanyDTO`, which exposes `admin_username` and `admin_real_name` (not the admin user ID).
      parameters:
        - in: query
          name: name
          schema: { type: string }
          description: Fuzzy match on company name.
        - in: query
          name: admin
          schema: { type: string }
          description: Fuzzy match on **admin username or real name**.
        - in: query
          name: address
          schema: { type: string }
          description: Fuzzy match on **company wallet address**.
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Companies
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/CompanyDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/companies/unused-addresses:
    get:
      tags: [Companies]
      summary: List unused company addresses (super admin)
      description: Returns the fixed pool of assignable addresses minus those already assigned to companies.
      responses:
        "200":
          description: Unused addresses
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UnusedAddressList" }
              examples:
                sample:
                  value:
                    addresses:
                      - "0x5b2e155495d2ca3fc4bb13088d77b8b15341f2d7"
                      - "0xfdc55438146f0cc7fccab36948c426f95feee4d1"
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/companies/{id}:
    get:
      tags: [Companies]
      summary: Get company detail
      description: |
        View access requires one of the following roles: **super_admin**, **company_admin**, **operator**, **finance**.

        **Note:** This endpoint returns `CompanyDTO`, which exposes `admin_username` and `admin_real_name` (not the admin user ID).
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Company detail
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CompanyDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    put:
      tags: [Companies]
      summary: Update company (super admin)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateCompanyInput" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Company" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/companies/{id}/partners:
    get:
      tags: [Companies, Partners]
      summary: List partners for a specific company
      description: |
        Returns the partner **relations** for the specified company (each row contains the partner company info).

        - **Access**: super_admin can view any; company users can view only their own company.
        - Filters are case-insensitive fuzzy (`ILIKE`) and combined with **AND**.
      parameters:
        - $ref: "#/components/parameters/PathId"
        - in: query
          name: name
          schema: { type: string }
          description: Fuzzy match on **partner company name**.
        - in: query
          name: address
          schema: { type: string }
          description: Fuzzy match on **partner company address**.
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Partners
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Partner" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/companies/{id}/partners/{pid}:
    get:
      tags: [Companies, Partners]
      summary: Get a specific partner relation for a company
      description: |
        Returns a single partner **relation** for the specified company (row contains the partner company info).

        - **Access**: `super_admin` can view any; company users can view only their own company.
      parameters:
        - $ref: "#/components/parameters/PathId"
        - in: path
          name: pid
          required: true
          schema: { type: integer, format: int64 }
          description: Partner relation ID (the relation row ID under the specified company)
      responses:
        "200":
          description: Partner relation
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Partner" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/users:
    post:
      tags: [Users]
      summary: Create user (company admin)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateUserInput" }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    get:
      tags: [Users]
      summary: Search users (company admin)
      description: |
        All text filters are case-insensitive fuzzy (`ILIKE`). Non-empty filters are combined with **AND**.
      parameters:
        - in: query
          name: role
          schema: { $ref: "#/components/schemas/RoleEnum" }
        - in: query
          name: status
          schema: { $ref: "#/components/schemas/UserStatusEnum" }
        - in: query
          name: username
          schema: { type: string }
          description: Fuzzy match on username.
        - in: query
          name: email
          schema: { type: string }
          description: Fuzzy match on email.
        - in: query
          name: real_name
          schema: { type: string }
          description: Fuzzy match on real name.
        - in: query
          name: phone
          schema: { type: string }
          description: Fuzzy match on phone.
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Users
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/User" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/users/{id}:
    get:
      tags: [Users]
      summary: Get user detail (self or company admin)
      description: |
        - A user can fetch **their own** user record.
        - Company admins can fetch users **within their company**.
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: User
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    put:
      tags: [Users]
      summary: Update user (company admin)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateUserInput" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/users/{id}/reset-password:
    post:
      tags: [Users]
      summary: Reset user password to default (company admin)
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/users/{id}/disable:
    post:
      tags: [Users]
      summary: Disable user (company admin)
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/partners:
    post:
      tags: [Partners]
      summary: Create partner (company member)
      description: |
        Creates a partner **relation** for the caller's company.

        Two modes are supported:
        - **Internal partner** (on‑platform): provide `partner_company_id` to link to an existing **company**.
        - **External partner** (off‑platform): provide `name` **and** `wallet_address` (plus optional contact fields).

        Notes:
        - External partner `wallet_address` is normalized to lowercase and must be unique per company.
        - You cannot add your own company as a partner.
        - Allowed roles: **company_admin**, **operator**, **finance**, **super_admin**.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreatePartnerInput" }
            examples:
              internal:
                summary: Link to an existing company
                value:
                  partner_company_id: 42
              external:
                summary: Create an external partner
                value:
                  name: "Shenzhen Metals Ltd"
                  contact: "Ms. Wang"
                  contact_info: "wang@example.com / +86 131 0000 0000"
                  wallet_address: "0x5b2e155495d2ca3fc4bb13088d77b8b15341f2d7"
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PartnerDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/partners/{id}:
    delete:
      tags: [Partners]
      summary: Delete partner (company member)
      description: Allowed roles are **company_admin**, **operator**, **finance**, **super_admin**.
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders:
    post:
      tags: [Orders]
      summary: Create order (operator/company_admin)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateOrderInput" }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    get:
      tags: [Orders]
      summary: Search orders
      description: |
        Datetime filters accept RFC3339 or `YYYY-MM-DD`. If only a date is supplied, the end boundary is exclusive of the next day.
        **Notes:**
        - `status` accepts **one or more** statuses as a comma-separated list (CSV).
      parameters:
        - in: query
          name: id
          schema: { type: integer, format: int64 }
        - in: query
          name: type
          schema: { $ref: "#/components/schemas/OrderTypeEnum" }
        - in: query
          name: status
          description: Filter by **one or more** statuses (CSV), e.g. `pending_l2_approval,pending_l1_approval`.
          required: false
          style: form
          explode: false
          schema:
            type: array
            items: { $ref: "#/components/schemas/OrderStatusEnum" }
        - in: query
          name: trade_type
          schema: { $ref: "#/components/schemas/TradeTypeEnum" }
        - in: query
          name: q
          schema: { type: string }
          description: Fuzzy match on order name.
        - in: query
          name: partner_q
          schema: { type: string }
          description: Fuzzy match on partner name.
        - in: query
          name: created_from
          schema: { type: string, example: "2025-01-01" }
        - in: query
          name: created_to
          schema: { type: string, example: "2025-01-31" }
        - in: query
          name: submitted_from
          schema: { type: string, example: "2025-01-01T00:00:00Z" }
        - in: query
          name: submitted_to
          schema: { type: string, example: "2025-01-31T23:59:59Z" }
        - in: query
          name: approved_from
          schema: { type: string }
        - in: query
          name: approved_to
          schema: { type: string }
        - in: query
          name: paid_from
          schema: { type: string }
        - in: query
          name: paid_to
          schema: { type: string }
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Orders
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/OrderDTO" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}:
    get:
      tags: [Orders]
      summary: Order detail
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    patch:
      tags: [Orders]
      summary: Update order (pre-submission for operator; admin broader)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateOrderInput" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    delete:
      tags: [Orders]
      summary: Delete order (pre-submission only)
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/submit:
    post:
      tags: [Orders]
      summary: Submit order
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/approve-l2:
    post:
      tags: [Orders]
      summary: Approve (L2)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ApprovalNote" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/reject-l2:
    post:
      tags: [Orders]
      summary: Reject (L2)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ApprovalNote" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/approve-l1:
    post:
      tags: [Orders]
      summary: Approve (L1)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ApprovalNote" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/reject-l1:
    post:
      tags: [Orders]
      summary: Reject (L1)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ApprovalNote" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/execute:
    post:
      tags: [Orders]
      summary: Execute payment (finance; or LC funding)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ExecuteInput" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/mark-received:
    post:
      tags: [Orders]
      summary: Mark collection payment received (finance/company_admin)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MarkReceivedInput" }
      responses:
        "200":
          description: Updated order (status -> payment_received)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/attachments:
    get:
      tags: [Attachments]
      summary: List order attachments
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Attachments
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/AttachmentDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/attachments/init:
    post:
      tags: [Attachments]
      summary: Init S3 uploads for an order (S3 mode only)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [files]
              properties:
                files:
                  type: array
                  items: { $ref: "#/components/schemas/InitUploadSpec" }
      responses:
        "200":
          description: Presigned PUT URLs
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploads:
                    type: array
                    items: { $ref: "#/components/schemas/InitUploadResult" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/attachments/complete:
    post:
      tags: [Attachments]
      summary: Complete S3 uploads for an order (S3 mode only)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { $ref: "#/components/schemas/CompleteUploadSpec" }
      responses:
        "200":
          description: Finalized attachments
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/AttachmentDTO" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/attachments/adopt:
    post:
      tags: [Attachments]
      summary: Adopt staged files into this order
      description: |
        Moves **ready** files from a staging group into the given order.
        Use the Group Staging endpoints to prepare files under a `group_key`, then call this to adopt them.
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [group_key]
              properties:
                group_key:
                  type: string
                  description: Staging group key to adopt from.
      responses:
        "200":
          description: Adopted attachments
          content:
            application/json:
              schema:
                type: object
                properties:
                  adopted:
                    type: array
                    items: { $ref: "#/components/schemas/AttachmentDTO" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/attachments/{attid}:
    delete:
      tags: [Attachments]
      summary: Delete an order attachment (pre-submission only)
      parameters:
        - $ref: "#/components/parameters/PathId"
        - in: path
          name: attid
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/attachments/groups/{key}:
    get:
      tags: [Attachments]
      summary: List staged attachments in a group (S3 mode only)
      parameters:
        - in: path
          name: key
          required: true
          schema: { type: string }
          description: Staging group key.
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Staged attachments
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/AttachmentDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/attachments/groups/{key}/init:
    post:
      tags: [Attachments]
      summary: Init staged uploads for a group (S3 mode only)
      parameters:
        - in: path
          name: key
          required: true
          schema: { type: string }
          description: Staging group key.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [files]
              properties:
                files:
                  type: array
                  items: { $ref: "#/components/schemas/InitUploadSpec" }
      responses:
        "200":
          description: Presigned PUT URLs
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploads:
                    type: array
                    items: { $ref: "#/components/schemas/InitUploadResult" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/attachments/groups/{key}/complete:
    post:
      tags: [Attachments]
      summary: Complete staged uploads for a group (S3 mode only)
      parameters:
        - in: path
          name: key
          required: true
          schema: { type: string }
          description: Staging group key.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { $ref: "#/components/schemas/CompleteUploadSpec" }
      responses:
        "200":
          description: Finalized staged attachments
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/AttachmentDTO" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/attachments/groups/{key}/{attid}:
    delete:
      tags: [Attachments]
      summary: Delete a staged attachment
      parameters:
        - in: path
          name: key
          required: true
          schema: { type: string }
        - in: path
          name: attid
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/attachments/{id}/download:
    get:
      tags: [Attachments]
      summary: Download an attachment by ID (S3)
      description: |
        Returns `{ "download_url": "..." }` — a short-lived S3 presigned URL for the file.
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: JSON with a presigned URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  download_url: { type: string }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/wallets:
    get:
      tags: [Wallets]
      summary: List company wallets (by asset and/or address substring)
      parameters:
        - in: query
          name: asset
          schema: { type: string, example: USDC }
        - in: query
          name: address
          schema:
            type: string
          description: Case-insensitive contains on address (substring match).
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Wallets
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Wallet" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/wallets/address/{address}/balances:
    get:
      tags: [Wallets]
      summary: Get balances for a wallet address
      description: |
        Returns on-ledger balances for the specified `address` via Cobo WaaS.

        - **Access**: `super_admin` or members of the company that owns the address.
        - If `tokens` is omitted, defaults to `BSC_BNB,BSC_USDC`.
        - Requires Cobo to be configured on the server.
      parameters:
        - in: path
          name: address
          required: true
          schema: { type: string }
          description: Wallet address (e.g., EVM address).
        - in: query
          name: tokens
          required: false
          schema: { type: string }
          description: Comma-separated token IDs to query (e.g., `BSC_BNB,BSC_USDC`).
      responses:
        "200":
          description: Balances for requested tokens
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressBalancesResponse"
              examples:
                example:
                  value:
                    address: "0x9018c44fdb8d7ddcef398285512586903d3acd11"
                    tokens: ["BSC_BNB", "BSC_USDC"]
                    balances:
                      BSC_BNB:
                        token_id: "BSC_BNB"
                        total: "1.23456789"
                        available: "1.23456789"
                      BSC_USDC:
                        token_id: "BSC_USDC"
                        total: "10000.00"
                        available: "10000.00"
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404":
          description: Address not assigned to any company
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "502":
          description: Upstream wallet provider error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "503":
          description: Cobo not configured on server
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  /api/v1/dashboard/metrics:
    get:
      tags: [Dashboard]
      summary: Dashboard KPI metrics
      description: |
        - Use one of `?range=monthly|quarterly|yearly`, **or** provide `start` & `end`.
        - Date/time accepts RFC3339 or `YYYY-MM-DD`.
      parameters:
        - in: query
          name: range
          schema:
            type: string
            enum: [monthly, quarterly, yearly]
        - in: query
          name: start
          schema: { type: string }
        - in: query
          name: end
          schema: { type: string }
      responses:
        "200":
          description: Metrics
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Metrics" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/dashboard/todos:
    get:
      tags: [Dashboard]
      summary: Dashboard To-Do buckets
      responses:
        "200":
          description: To-Do lists by bucket
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TODOs" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/dashboard/todos/dismiss:
    post:
      tags: [Dashboard]
      summary: Dismiss a single To-Do for this login session
      description: |
        Request payload: `{ resource, id }`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DismissRequestGeneric"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/lc/releases:
    get:
      tags: ["LC Release"]
      summary: List / search LC release queue
      parameters:
        - in: query
          name: id
          schema: { type: integer, format: int64 }
        - in: query
          name: partner_q
          schema: { type: string }
        - in: query
          name: trade_type
          schema: { $ref: "#/components/schemas/TradeTypeEnum" }
        - in: query
          name: status
          schema:
            type: string
            enum: [await_seller_confirm, await_buyer_confirm_and_release]
        - in: query
          name: q
          schema: { type: string, description: "Fuzzy order name." }
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: LC release items
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/ReleaseListItem" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/lc/releases/{id}:
    get:
      tags: ["LC Release"]
      summary: LC release detail
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ReleaseDetail" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/lc/releases/{id}/seller-confirm:
    post:
      tags: ["LC Release"]
      summary: Seller confirm shipment (seller-company Operator)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NoteBody" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/lc/releases/{id}/buyer-confirm:
    post:
      tags: ["LC Release"]
      summary: Buyer confirm received & request release (buyer-company Operator)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NoteBody" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/lc/releases/{id}/platform-confirm:
    post:
      tags: ["LC Release"]
      summary: Platform confirm (super admin)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NoteBody" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/transactions/{id}:
    get:
      tags: [Transactions]
      summary: Get transaction status (Cobo) & sync linked order
      description: |
        Polls a **Cobo** transaction by `id`, updates the linked order in the database, and returns a compact status payload for the frontend to display.

        - Authorization equals **order:view** on the linked order.
        - Intended for polling after initiating a payment transfer (when `OrderDTO.cobo_tx_id` is present).
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: Cobo `transaction_id`.
      responses:
        "200":
          description: Transaction status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionStatus"
              examples:
                example:
                  value:
                    order_id: 123
                    transaction_id: "tx_26d7c2..."
                    status: "Completed"
                    transaction_hash: "0xabc123...def"
                    order_status: "payment_completed"
                    completed: true
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404":
          description: Transaction ID not linked to any order
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "502":
          description: Upstream/unknown error when querying Cobo
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "503":
          description: Cobo not configured on server
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    PathId:
      in: path
      name: id
      required: true
      schema: { type: integer, format: int64 }
    Page:
      in: query
      name: page
      required: false
      description: 1-based page index.
      schema:
        type: integer
        minimum: 1
        default: 1
    PageSize:
      in: query
      name: page_size
      required: false
      description: Number of items per page (maximum 100).
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  headers:
    X-Total-Count:
      description: Total number of items matching the filter.
      schema: { type: integer, format: int64 }
    X-Page:
      description: Current page (1-based).
      schema: { type: integer, minimum: 1 }
    X-Page-Size:
      description: Page size used to generate the response.
      schema: { type: integer, minimum: 1 }
    X-Total-Pages:
      description: Total number of pages.
      schema: { type: integer, minimum: 0 }
    Link:
      description: 'RFC 5988 "Link" header with pagination links (rel="first", "prev", "next", "last") when applicable.'
      schema: { type: string }
      example: '<http://nova-api.sgusd.io/api/v1/orders?page=2&page_size=20>; rel="next", <http://nova-api.sgusd.io/api/v1/orders?page=10&page_size=20>; rel="last"'

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    Unauthorized:
      description: Missing/invalid token
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    Forbidden:
      description: Forbidden by policy
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }

  schemas:
    # ===== Common =====
    OkResponse:
      type: object
      properties:
        ok: { type: boolean, example: true }
    ErrorResponse:
      type: object
      properties:
        error: { type: string }
    ApprovalNote:
      type: object
      properties:
        note:
          type: string
          description: Optional note
    NoteBody:
      type: object
      properties:
        note: { type: string }
    RoleEnum:
      type: string
      enum: [super_admin, company_admin, operator, l1_admin, l2_admin, finance]
    UserStatusEnum:
      type: string
      enum: [pending_activation, normal, disabled]
    OrderTypeEnum:
      type: string
      enum: [payment, onchain_lc, collection]
    OrderStatusEnum:
      type: string
      enum:
        - pending_submission
        - pending_l2_approval
        - pending_l1_approval
        - pending_payment
        - pending_release
        - submitted
        - payment_received
        - payment_completed
        - order_closed
    TradeTypeEnum:
      type: string
      enum: [iron_ore, crude_oil]

    # ===== Enums =====
    EnumItem:
      type: object
      properties:
        value:
          type: string
          description: Stable enum value used by the API
        label:
          type: string
          description: English label for UI
        label_zh:
          type: string
          description: Chinese label for UI
        description:
          type: string
          description: Optional description/tooltips

    EnumsResponse:
      type: object
      properties:
        roles:
          type: array
          items: { $ref: "#/components/schemas/EnumItem" }
        user_status:
          type: array
          items: { $ref: "#/components/schemas/EnumItem" }
        order_types:
          type: array
          items: { $ref: "#/components/schemas/EnumItem" }
        order_status:
          type: array
          items: { $ref: "#/components/schemas/EnumItem" }
        trade_types:
          type: array
          items: { $ref: "#/components/schemas/EnumItem" }
        lc_release_status:
          type: array
          items: { $ref: "#/components/schemas/EnumItem" }

    # ===== Auth =====
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username: { type: string }
        password: { type: string }
    LoginResult:
      type: object
      required: [need_activation]
      properties:
        need_activation:
          type: boolean
          description: true when the user must complete activation before normal use
        token:
          type: string
          description: JWT token (short-lived when `need_activation=true`, normal otherwise)
        session:
          type: string
          description: Session nonce (present on `/auth/login` responses for both flows; used for this login session and internally during activation)
        role:
          $ref: "#/components/schemas/RoleEnum"
        company_id:
          type: integer
          format: int64
          nullable: true
          description: Company ID associated with the user; null for super_admin.

    InitActivationResponse:
      type: object
      required: [totp_secret, otpauth_url, issuer, account]
      properties:
        totp_secret:
          type: string
          description: Base32 secret to be stored in the authenticator app (show to the user once)
        otpauth_url:
          type: string
          description: The `otpauth://` provisioning URL; render this as a QR or call `/auth/totp-qr`
        issuer:
          type: string
          example: NOVA TRADE
        account:
          type: string
          description: Usually the username; appears as the account label in the authenticator

    ActivateRequest:
      type: object
      required: [new_password, email, totp_code]
      properties:
        new_password:
          type: string
          description: New password to set during activation
        email:
          type: string
          format: email
          description: Email to bind to the account
        totp_code:
          type: string
          description: 6-digit code from the authenticator app

    # ===== Companies =====
    Company:
      type: object
      properties:
        id: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        name: { type: string }
        admin: { type: integer, format: int64, nullable: true }
        contact: { type: string }
        address:
          type: string
          description: "Company wallet address (unique; assigned from a fixed pool)."
        created_by: { type: integer, format: int64 }
    CreateCompanyInput:
      type: object
      required: [name, admin, contact, address]
      properties:
        name: { type: string }
        admin:
          type: string
          description: Admin username to create for this company.
        admin_real_name:
          type: string
          nullable: true
          description: Optional real name for the newly created admin user.
        contact: { type: string }
        address:
          type: string
          description: "Must be one of the unused addresses from `/api/v1/companies/unused-addresses`."
          enum:
            - "0x9018c44fdb8d7ddcef398285512586903d3acd11"
            - "0x5b2e155495d2ca3fc4bb13088d77b8b15341f2d7"
            - "0xfdc55438146f0cc7fccab36948c426f95feee4d1"
    UpdateCompanyInput:
      type: object
      description: Address is not editable via this endpoint.
      properties:
        name: { type: string, nullable: true }
        contact: { type: string, nullable: true }
        admin: { type: integer, format: int64, nullable: true }
    CompanyDTO:
      type: object
      description: Company view model returned by list/detail endpoints.
      properties:
        id: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        name: { type: string }
        contact: { type: string }
        address:
          type: string
          description: "Company wallet address (unique; assigned from a fixed pool)."
        created_by: { type: integer, format: int64 }
        admin_username:
          type: string
          nullable: true
          description: Username of the company admin (if assigned).
        admin_real_name:
          type: string
          nullable: true
          description: Real name of the company admin (if assigned).

    UnusedAddressList:
      type: object
      properties:
        addresses:
          type: array
          items: { type: string }

    # ===== Users =====
    User:
      type: object
      properties:
        id: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        username: { type: string }
        real_name: { type: string }
        email: { type: string }
        phone: { type: string }
        role: { $ref: "#/components/schemas/RoleEnum" }
        status: { $ref: "#/components/schemas/UserStatusEnum" }
        company_id: { type: integer, format: int64, nullable: true }
        must_change: { type: boolean }
    CreateUserInput:
      type: object
      required: [username, real_name, email, phone, role]
      properties:
        username: { type: string }
        real_name: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        role:
          allOf: [{ $ref: "#/components/schemas/RoleEnum" }]
          description: Must be a company-level role (not super_admin).
    UpdateUserInput:
      type: object
      properties:
        real_name: { type: string, nullable: true }
        email: { type: string, format: email, nullable: true }
        phone: { type: string, nullable: true }
        role: { $ref: "#/components/schemas/RoleEnum" }
        status: { $ref: "#/components/schemas/UserStatusEnum" }

    # ===== Partners =====
    Partner:
      type: object
      description: Partner **relation** between the caller's company and a partner **company**.
      properties:
        id: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        company_id:
          {
            type: integer,
            format: int64,
            description: "Owner company ID (the caller's company).",
          }
        partner_company_id:
          {
            type: integer,
            format: int64,
            description: "The partner company ID.",
          }
        partner_company_name:
          { type: string, description: "Resolved from the partner company." }
        partner_company_address:
          {
            type: string,
            description: "Resolved wallet address from the partner company.",
          }
        created_by: { type: integer, format: int64 }
    # Create partner now supports two modes: internal (link to company) OR external (freeform).
    CreatePartnerInput:
      oneOf:
        - $ref: "#/components/schemas/CreatePartnerInternal"
        - $ref: "#/components/schemas/CreatePartnerExternal"
      description: |
        One of:
        - **Internal**: link to an existing company using `partner_company_id`.
        - **External**: provide `name` and `wallet_address` (plus optional contact fields).

    CreatePartnerInternal:
      type: object
      required: [partner_company_id]
      properties:
        partner_company_id:
          type: integer
          format: int64
          minimum: 1
          description: "Existing company ID to link as partner (cannot be your own company)."

    CreatePartnerExternal:
      type: object
      required: [name, wallet_address]
      properties:
        name:
          type: string
          description: "Partner name."
        contact:
          type: string
          description: "Contact person (optional)."
        contact_info:
          type: string
          description: "Contact info (optional)."
        wallet_address:
          type: string
          description: "Partner wallet address (normalized to lowercase; unique per company)."

    PartnerDTO:
      type: object
      description: Partner view returned when creating a partner. Supports internal and external partners.
      properties:
        id: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        company_id: { type: integer, format: int64 }
        # Internal partner linkage (nullable for external partners)
        partner_company_id:
          type: integer
          format: int64
          nullable: true
        partner_company_name:
          type: string
          nullable: true
        partner_company_address:
          type: string
          nullable: true
        # External partner fields (also populated for internal for convenience)
        name: { type: string }
        contact: { type: string }
        contact_info: { type: string }
        wallet_address: { type: string }
        created_by: { type: integer, format: int64 }

    # ===== Orders =====
    ExecInfo:
      type: object
      properties:
        company_wallet_address: { type: string }
        company_wallet_balance:
          type: string
          description: "Human readable with thousands separators."
        recipient_wallet_address: { type: string }
    OrderDTO:
      type: object
      properties:
        id: { type: integer, format: int64 }
        company_id: { type: integer, format: int64 }
        type: { $ref: "#/components/schemas/OrderTypeEnum" }
        status: { $ref: "#/components/schemas/OrderStatusEnum" }
        name: { type: string }
        trade_type: { $ref: "#/components/schemas/TradeTypeEnum" }
        partner_id: { type: integer, format: int64 }
        partner_wallet: { type: string }
        amount_minor: { type: integer, format: int64 }
        amount:
          type: string
          description: "Human readable with thousands separators."
        asset: { type: string }
        description: { type: string }
        submitter_id: { type: integer, format: int64, nullable: true }
        submitted_at: { type: string, format: date-time, nullable: true }
        finance_id: { type: integer, format: int64, nullable: true }
        approved_at: { type: string, format: date-time, nullable: true }
        payment_done_at: { type: string, format: date-time, nullable: true }
        tx_hash: { type: string }
        tx_url: { type: string }
        # live Cobo tracking for payment orders
        cobo_tx_id:
          type: string
          description: Present when a real Cobo transfer was initiated; poll `/api/v1/transactions/{id}`.
        cobo_tx_status:
          type: string
          description: 'Last known Cobo status for `cobo_tx_id` (e.g., "Pending", "Completed").'
        # LC extras
        lc_funding_tx_hash: { type: string }
        lc_funding_tx_url: { type: string }
        lc_release_tx_hash: { type: string }
        lc_release_tx_url: { type: string }
        attachments:
          type: array
          items: { type: string }
        created_by: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        execution_info:
          $ref: "#/components/schemas/ExecInfo"
          nullable: true
    CreateOrderInput:
      type: object
      required: [type, name, trade_type, partner_id, amount]
      properties:
        type: { $ref: "#/components/schemas/OrderTypeEnum" }
        name: { type: string }
        trade_type:
          $ref: "#/components/schemas/TradeTypeEnum"
        partner_id: { type: integer, format: int64 }
        amount: { type: string, description: "Decimal string" }
        asset:
          type: string
          example: USDC
          description: "Optional; defaults to server's DEFAULT_ASSET."
        description: { type: string }
        save_and_submit: { type: boolean }
        save_as_draft: { type: boolean }
        attachment_group_key:
          type: string
          description: |
            Optional staging group key. If provided, ready files from `/api/v1/attachments/groups/{key}`
            will be adopted into this order after creation.
    UpdateOrderInput:
      type: object
      properties:
        name: { type: string, nullable: true }
        trade_type: { $ref: "#/components/schemas/TradeTypeEnum" }
        partner_id: { type: integer, format: int64, nullable: true }
        amount: { type: string, nullable: true }
        asset: { type: string, nullable: true }
        description: { type: string, nullable: true }
    ExecuteInput:
      type: object
      required: [password, email_otp, totp]
      properties:
        password: { type: string }
        email_otp: { type: string }
        totp: { type: string }
    MarkReceivedInput:
      type: object
      required: [tx_hash]
      properties:
        tx_hash: { type: string }

    # ===== Attachments =====
    AttachmentDTO:
      type: object
      properties:
        id: { type: integer, format: int64 }
        file_name: { type: string }
        size_bytes: { type: integer, format: int64 }
        content_type: { type: string }
        status: { type: string, enum: [uploading, ready, deleted] }
    InitUploadSpec:
      type: object
      required: [file_name]
      properties:
        file_name:
          type: string
          description: "Will be sanitized to basename and safe characters."
        content_type: { type: string, default: application/octet-stream }
        size: { type: integer, format: int64, minimum: 0 }
    InitUploadResult:
      type: object
      properties:
        attachment_id: { type: integer, format: int64 }
        key: { type: string, description: "S3 object key" }
        put_url: { type: string, description: "Presigned PUT URL" }
        headers:
          type: object
          additionalProperties: { type: string }
          description: "Headers that MUST be sent along with the PUT (e.g., SSE-KMS)."
        expires_in: { type: integer, example: 300 }
    CompleteUploadSpec:
      type: object
      required: [attachment_id]
      properties:
        attachment_id: { type: integer, format: int64 }
        checksum_sha256:
          type: string
          description: Optional client-computed checksum (hex).

    # ===== Wallets =====
    Wallet:
      type: object
      properties:
        id: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        address: { type: string }
        asset: { type: string }
        balance_minor: { type: integer, format: int64 }
        last_op_at: { type: string, format: date-time }
        company_id: { type: integer, format: int64, nullable: true }

    TokenBalance:
      type: object
      properties:
        token_id: { type: string }
        total:
          type: string
          description: Total balance as a decimal string.
        available:
          type: string
          description: Spendable balance as a decimal string.
        pending:
          type: string
          nullable: true
          description: Pending balance, when provided by the provider.
        locked:
          type: string
          nullable: true
          description: Locked balance, when provided by the provider.

    AddressBalancesResponse:
      type: object
      properties:
        address: { type: string }
        tokens:
          type: array
          items: { type: string }
        balances:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/TokenBalance"

    # ===== Dashboard =====
    Metrics:
      type: object
      properties:
        total_orders: { type: integer, format: int64 }
        total_payments:
          type: string
          description: "Sum in default asset, human readable"
        total_receipts:
          type: string
          description: "Sum in default asset, human readable"
    TODOItem:
      type: object
      properties:
        id: { type: integer, format: int64 }
        name: { type: string }
        amount: { type: string }
        status: { type: string }
        time: { type: string }
    TODOs:
      type: object
      properties:
        pending_submission:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
        pending_l2_approval:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
        pending_l1_approval:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
        rejected_awaiting_action:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
        pending_payment:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
        receipts_pending_payer:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
        lc_wait_seller_confirm:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
        lc_wait_buyer_confirm_and_release:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
    DismissRequestGeneric:
      type: object
      required: [resource, id]
      properties:
        resource:
          type: string
          enum: [order, collection, lc]
        id: { type: integer, format: int64 }

    # ===== Notifications =====
    Notification:
      type: object
      properties:
        id: { type: integer, format: int64 }
        user_id: { type: integer, format: int64 }
        title: { type: string }
        body: { type: string }
        read: { type: boolean }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    # ===== LC Release =====
    ReleaseListItem:
      type: object
      properties:
        order_id: { type: integer, format: int64 }
        name: { type: string }
        trade_type: { $ref: "#/components/schemas/TradeTypeEnum" }
        partner: { type: string }
        escrow_address: { type: string }
        escrow_address_url: { type: string }
        amount_minor: { type: integer, format: int64 }
        amount: { type: string }
        asset: { type: string }
        status:
          type: string
          enum: [await_seller_confirm, await_buyer_confirm_and_release]
        status_label:
          type: string
          example: "待卖方确认发货"
    Order:
      type: object
      properties:
        id: { type: integer, format: int64 }
        company_id: { type: integer, format: int64 }
        seller_company_id: { type: integer, format: int64, nullable: true }
        type: { $ref: "#/components/schemas/OrderTypeEnum" }
        status: { $ref: "#/components/schemas/OrderStatusEnum" }
        name: { type: string }
        trade_type: { $ref: "#/components/schemas/TradeTypeEnum" }
        partner_id: { type: integer, format: int64 }
        partner_wallet: { type: string }
        amount_minor: { type: integer, format: int64 }
        asset: { type: string }
        description: { type: string }
        submitter_id: { type: integer, format: int64, nullable: true }
        submitted_at: { type: string, format: date-time, nullable: true }
        finance_id: { type: integer, format: int64, nullable: true }
        approved_at: { type: string, format: date-time, nullable: true }
        payment_done_at: { type: string, format: date-time, nullable: true }
        tx_hash: { type: string }
        created_by: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    Escrow:
      type: object
      properties:
        id: { type: integer, format: int64 }
        order_id: { type: integer, format: int64 }
        address: { type: string }
        amount_minor: { type: integer, format: int64 }
        tx_hash: { type: string }
        seller_confirmed_at: { type: string, format: date-time, nullable: true }
        seller_admin_id: { type: integer, format: int64, nullable: true }
        seller_note: { type: string }
        buyer_confirmed_at: { type: string, format: date-time, nullable: true }
        buyer_admin_id: { type: integer, format: int64, nullable: true }
        buyer_note: { type: string }
        platform_confirmed_at:
          { type: string, format: date-time, nullable: true }
        platform_admin_id: { type: integer, format: int64, nullable: true }
        platform_note: { type: string }
        release_tx_hash: { type: string }
        release_tx_at: { type: string, format: date-time, nullable: true }
    ReleaseDetail:
      type: object
      properties:
        order: { $ref: "#/components/schemas/Order" }
        partner: { type: string }
        escrow: { $ref: "#/components/schemas/Escrow" }
        funding_tx_url: { type: string }
        release_tx_url: { type: string }

    # ===== Transactions =====
    TransactionStatus:
      type: object
      properties:
        order_id:
          type: integer
          format: int64
        transaction_id:
          type: string
          description: Cobo transaction ID.
        status:
          type: string
          description: 'Cobo status (e.g., "Pending", "Completed", "Failed").'
        transaction_hash:
          type: string
          description: On-chain transaction hash when available.
        order_status:
          $ref: "#/components/schemas/OrderStatusEnum"
        completed:
          type: boolean
          description: true when the transaction is completed and the order has been auto-advanced (if applicable).
