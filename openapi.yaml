openapi: 3.0.3
info:
  title: Nova Trade API
  version: "1.0.0"
  description: |
    HTTP+JSON API for Nova Trade.

    - Base URL in dev: `http://nova-api.sgusd.io`
    - Versioned API root: `/api/v1`
    - Auth: Bearer JWT (`Authorization: Bearer <token>`)
    - Error shape: `{ "error": "message" }`
    - Some endpoints return `{ "ok": true }` on success.

    ### Pagination
    All list/search endpoints support pagination.

    - Query params:
      - `page` (integer, 1-based; default **1**)
      - `page_size` (integer; default **20**, max **100**)
    - Response headers:
      - `X-Total-Count`: total items matching the filter
      - `X-Page`: current page (1-based)
      - `X-Page-Size`: page size used
      - `X-Total-Pages`: total number of pages
      - `Link`: RFC 5988 pagination links (when applicable), e.g.
        `<.../orders?page=2&page_size=20>; rel="next", <.../orders?page=10&page_size=20>; rel="last"`

    Notes:
    - If `page` exceeds the last page, the array may be empty.
    - If `page_size` is greater than the server maximum, it may be clamped.

    ### 贸易生命周期流程（给前端同学）

    #### 情况一：内部卖方（支持LC）

    状态 `trade_created`
    - 买方业务员用 `POST /api/v1/trades` 创建贸易单。必填字段：`partner_id,name,product_type,nominated_wmt,base_cargo_value,margin_bps,days_to_present`；常用可选项：`description,lc_issue_date,lc_expiry_date`。
    - 需要链上信用证时，保留在此状态调用 `POST /api/v1/trades/{id}/open-lc`。必填 `lc_name`，可带 `save_and_submit=true` 直接提交审批；审批与链上签名在订单模块内完成。

    状态 `lc_opened`
    - 卖方业务员提交装船与首次结算数据：`POST /api/v1/trades/{id}/ship-confirm`。必填 `vessel_name,bill_of_lading_no,loaded_wmt,loaded_dmt,load_port_moisture_bps,fe_content,price,load_port_quality_iron_bps,first_settlement_amount`；可选 `departure_date,note` 等。
    - 买方按审批顺序调用 `POST /api/v1/trades/{id}/buyer-confirm-shipment`（可写 `note`）。链上放款完成后，状态自动进入 `first_settlement_done`。

    状态 `first_settlement_done`
    - 任一方发起第二次结算共识：`POST /api/v1/trades/{id}/consensus/start`，请求体至少包含 `round=2,buyer_pays,amount`，可加 `note`。
    - 对方用 `POST /api/v1/trades/{id}/consensus/2/approve` 确认；若需退回，使用 `.../reject`，原发起方可 `PATCH /api/v1/trades/{id}/consensus/2` 修改后重提。通过后状态改为 `consensus2_reached`。

    状态 `consensus2_reached`
    - 付款方调用 `POST /api/v1/trades/{id}/create-payment`，必填 `round=2,order_name`，可传 `save_and_submit=true` 让提单直接进入审批流。
    - 若本轮应由卖方回款且卖方是外部公司，买方在收到链上资金后用 `POST /api/v1/trades/{id}/consensus/2/record-receipt` 登记，必填 `tx_hash`。
    - 支付提单执行完成或收款登记成功后，状态进入 `second_settlement_done`。

    状态 `second_settlement_done`
    - 再次发起第三次结算共识：`POST /api/v1/trades/{id}/consensus/start`，这次 `round=3`，并根据需要填写到港数据（示例：`arrival_date,unload_wmt,unload_iron_bps,unload_moisture_bps,final_iron_bps,final_dmt`）。审批流程与上一轮相同，成功后状态变为 `consensus3_reached`。

    状态 `consensus3_reached`
    - 付款方再次调用 `POST /api/v1/trades/{id}/create-payment`（`round=3`）；若需外部卖方回款，同样使用 `record-receipt`。
    - 订单执行或收款登记结束后，贸易单达到最终状态 `third_settlement_done`。

    随时可以用 `GET /api/v1/trades/{id}` 刷新最新状态与金额。

    #### 情况二：外部卖方（无需LC）

    - 外部卖方无法调用 `POST /api/v1/trades/{id}/open-lc`（接口会返回 403），流程不会进入 `lc_opened`。
    - 从 `trade_created` 开始即可直接调用 `POST /api/v1/trades/{id}/consensus/start`，`round=2` 的请求会自动判定双方身份并立即记为已通过，状态马上变为 `consensus2_reached`。
    - 后续与内部流程一致：付款方创建并执行 `round=2`、`round=3` 的支付提单；若共识要求外部卖方向买方付款，买方收到链上资金后用 `record-receipt` 填写 `tx_hash`。
    - 当第三轮支付完成或收款登记完成时，贸易单同样结束在 `third_settlement_done`。

servers:
  - url: http://nova-api.sgusd.io

tags:
  - name: Health
  - name: Auth
  - name: Companies
  - name: Users
  - name: Partners
  - name: Orders
  - name: Trades
    description: |
      Trade lifecycle APIs. Follow the buyer/seller workflow: create trade → optional LC → consensus rounds.
      贸易相关接口。按流程理解：创建贸易单 → （可选）开立信用证 → 两轮共识与付款。
  - name: Attachments
  - name: Wallets
  - name: Dashboard
  - name: LC Release
    description: |
      Escrow release tasks created by LC orders. Seller confirms shipment, buyer confirms release.
      LC放款相关接口。卖方确认发货，买方确认放款，查看托管账户信息。
  - name: Meta
  - name: Transactions

security:
  - BearerAuth: []

paths:
  /health:
    get:
      tags: [Health]
      summary: Liveness/health
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }

  /api/v1/enums:
    get:
      tags: [Meta]
      summary: Enumerations for UI (public)
      description: |
        Returns labeled candidate values (value/label/label_zh/description/tag_color) for roles, user status,
        order types & statuses, trade types, and LC Release list statuses.
      security: []
      responses:
        "200":
          description: Enum candidates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnumsResponse"
              examples:
                example:
                  value:
                    roles:
                      - value: super_admin
                        label: Super Admin
                        label_zh: 超级管理员
                        description: "Platform-wide; creates companies/admins; performs LC platform confirmation."
                        tag_color: "#ff4d4f"
                      - value: company_admin
                        label: Company Admin
                        label_zh: 公司管理员
                        description: "Company-scoped management of users/records; approvals done by L1/L2 roles."
                        tag_color: "#fa8c16"
                      - value: operator
                        label: Operator
                        label_zh: 业务员
                        description: "Creates & submits Payment/LC orders and Collection orders; LC release confirmations are Operator-driven."
                        tag_color: "#1890ff"
                      - value: l2_admin
                        label: Level-2 Admin
                        label_zh: 二级管理员
                        description: "Approves or rejects orders in 'pending L2 approval'."
                        tag_color: "#13c2c2"
                      - value: l1_admin
                        label: Level-1 Admin
                        label_zh: 一级管理员
                        description: "Approves or rejects orders in 'pending L1 approval'."
                        tag_color: "#52c41a"
                      - value: finance
                        label: Finance
                        label_zh: 财务
                        description: "Executes outgoing transfers after approval; monitors wallets and Collections."
                        tag_color: "#722ed1"
                      - value: observer
                        label: Observer
                        label_zh: 观察员
                        description: "Read-only visibility within your company; no write actions or To-Dos."
                        tag_color: "#bfbfbf"
                    user_status:
                      - value: pending_activation
                        label: Pending Activation
                        label_zh: 待激活
                        description: "First login must change password and bind email + Google Authenticator (TOTP)."
                        tag_color: "#faad14"
                      - value: normal
                        label: Normal
                        label_zh: 正常
                        description: "Active user."
                        tag_color: "#52c41a"
                      - value: disabled
                        label: Disabled
                        label_zh: 禁用
                        description: "Login is blocked until re-enabled."
                        tag_color: "#bfbfbf"
                    order_types:
                      - value: payment
                        label: Payment / Remittance
                        label_zh: 支付汇款
                        description: "Direct transfer to partner wallet after approvals."
                        tag_color: "#1890ff"
                      - value: onchain_lc
                        label: On-chain LC
                        label_zh: 链上信用证
                        description: "Funding to tri-party escrow; later released to seller wallet after tri-party confirmations."
                        tag_color: "#722ed1"
                      - value: collection
                        label: Collection (Receipt)
                        label_zh: 收款
                        description: "Request payment from counterparty; finance/company admin marks received with a TX hash."
                        tag_color: "#389e0d"
                    order_status:
                      - value: pending_submission
                        label: Pending Submission
                        label_zh: 待提交
                        description: "Saved; requires explicit 'submit' to enter approval / collection flow."
                        tag_color: "#faad14"
                      - value: pending_l2_approval
                        label: Pending L2 Approval
                        label_zh: 待二级审批
                        description: "Awaiting Level-2 Admin review (Payment/LC)."
                        tag_color: "#13c2c2"
                      - value: pending_l1_approval
                        label: Pending L1 Approval
                        label_zh: 待一级审批
                        description: "Awaiting Level-1 Admin review (Payment/LC)."
                        tag_color: "#1890ff"
                      - value: pending_payment
                        label: Pending Payment
                        label_zh: 待付款
                        description: "Finance can transfer funds. LC: fund escrow. Payment: pay seller wallet."
                        tag_color: "#fa8c16"
                      - value: pending_release
                        label: LC Awaiting Release
                        label_zh: 待放款流程
                        description: "LC only: escrow funded, waiting for seller & buyer Operator confirmations and platform confirmation."
                        tag_color: "#722ed1"
                      - value: submitted
                        label: Submitted (Collection)
                        label_zh: 已提交
                        description: "Collection only: 已提交收款给对方，待对方付款。"
                        tag_color: "#1890ff"
                      - value: payment_received
                        label: Payment Received (Collection)
                        label_zh: 付款完成
                        description: "Collection only: Counterparty payment received; TX recorded for auditability."
                        tag_color: "#52c41a"
                      - value: payment_completed
                        label: Payment Completed
                        label_zh: 付款完成
                        description: "Final success state for Payment and LC (after release)."
                        tag_color: "#52c41a"
                      - value: order_closed
                        label: Order Closed
                        label_zh: 提单关闭
                        description: "Rejected at L2 or L1; shown in Completed for auditability."
                        tag_color: "#ff4d4f"
                    product_types:
                      - value: pilbara_blend_fines
                        label: Pilbara Blend Fines
                        label_zh: PB粉
                        tag_color: "#5B8FF9"
                      - value: newman_fines
                        label: Newman Fines
                        label_zh: 纽曼粉
                        tag_color: "#61DDAA"
                      - value: carajas_fines
                        label: Carajas Fines
                        label_zh: 卡粉
                        tag_color: "#F6BD16"
                    trade_states:
                      - value: trade_created
                        label: Trade Created
                        label_zh: 贸易创建成功
                        tag_color: "#1890ff"
                      - value: lc_opened
                        label: LC Opened
                        label_zh: 信用证开立成功
                        tag_color: "#722ed1"
                      - value: first_settlement_done
                        label: First Settlement Done
                        label_zh: 第一次结算完成
                        tag_color: "#52c41a"
                      - value: consensus2_reached
                        label: Consensus Round 2
                        label_zh: 二次结算共识达成
                        tag_color: "#13c2c2"
                      - value: second_settlement_done
                        label: Second Settlement Done
                        label_zh: 第二次结算完成
                        tag_color: "#fa8c16"
                      - value: consensus3_reached
                        label: Consensus Round 3
                        label_zh: 三次结算共识达成
                        tag_color: "#ff4d4f"
                      - value: third_settlement_done
                        label: Third Settlement Done
                        label_zh: 第三次结算完成
                        tag_color: "#2f54eb"
                    lc_release_status:
                      - value: await_seller_confirm
                        label: Await Seller Confirmation
                        label_zh: 待卖方确认发货
                        description: "Seller company Operator confirms shipment."
                        tag_color: "#fa8c16"
                      - value: await_buyer_confirm_and_release
                        label: Await Buyer Confirmation & Release
                        label_zh: 待买方确认收货并放款
                        description: "Buyer company Operator confirms receipt and requests release; then platform confirms on-chain."
                        tag_color: "#52c41a"

  /api/v1/auth/me:
    get:
      tags: [Auth]
      summary: Get current user ("me")
      description: |
        Returns the currently authenticated user's basic profile for session bootstrap.
        Does not include the `must_change` flag; use user management endpoints for the full user record.
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentUser"
        "401": { $ref: "#/components/responses/Unauthorized" }
        "400": { $ref: "#/components/responses/BadRequest" }

  /api/v1/auth/login:
    post:
      tags: [Auth]
      summary: Login
      description: |
        - On success, returns a token.
        - If `need_activation=true`, the token is short-lived and intended for activation calls.
        - If `need_activation=false`, the token is a normal session token.
        - Returns `role` and `company_id` in both flows for immediate personalization (`company_id` is `null` for `super_admin`).
        - Includes a `session` nonce in both flows; use it to scope session-only actions (e.g., dismissing To-Dos).
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"
              examples:
                normal:
                  summary: Normal login
                  value:
                    need_activation: false
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    session: "bf4e0f1b9c7a427d9f24b5b9c1a2d3e4"
                    role: company_admin
                    company_id: 12
                need_activation:
                  summary: Login requires activation
                  value:
                    need_activation: true
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." # short-lived
                    session: "1d3a7c2e8f904a7d8b3e4f1c0a9b2c3d"
                    role: operator
                    company_id: 12
        "401": { $ref: "#/components/responses/Unauthorized" }
        "400": { $ref: "#/components/responses/BadRequest" }

  /api/v1/auth/init-activation:
    post:
      tags: [Auth]
      summary: Init activation (provision or return TOTP secret)
      description: |
        Idempotently provisions Google Authenticator (TOTP) for the authenticated user.

        - Returns both the Base32 `totp_secret` and the `otpauth_url` used to generate a QR.
        - If the user already has a secret, returns the existing secret and a reconstructed `otpauth_url`.
        - Use the returned `otpauth_url` to render a QR on the frontend or call `/auth/totp-qr` for a PNG.
      responses:
        "200":
          description: Provisioning info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitActivationResponse"
              examples:
                example:
                  value:
                    totp_secret: "JBSWY3DPEHPK3PXP"
                    otpauth_url: "otpauth://totp/NOVA%20TRADE:alice?secret=JBSWY3DPEHPK3PXP&issuer=NOVA%20TRADE&algorithm=SHA1&digits=6&period=30"
                    issuer: "NOVA TRADE"
                    account: "alice"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/auth/totp-qr:
    get:
      tags: [Auth]
      summary: TOTP provisioning QR (PNG)
      description: |
        Convenience endpoint that returns a PNG QR for the current user's `otpauth_url`.
        Under the hood it behaves like `/auth/init-activation` (idempotent; does not rotate the secret).
      parameters:
        - in: query
          name: size
          description: PNG width/height in pixels (min 128, max 1024). Defaults to 256.
          required: false
          schema:
            type: integer
            minimum: 128
            maximum: 1024
            default: 256
      responses:
        "200":
          description: PNG image with the QR code
          content:
            image/png:
              schema:
                type: string
                format: binary
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/auth/activate:
    post:
      tags: [Auth]
      summary: Complete activation (set password & email, verify TOTP)
      description: |
        Validates the provided 6-digit TOTP code against the bound secret and sets the user's password and email.
        On success returns a normal long-lived login token, plus the user's `role` and `company_id`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivateRequest"
            examples:
              example:
                value:
                  new_password: "Strong#Pass1"
                  email: "alice@example.com"
                  totp_code: "123456"
      responses:
        "200":
          description: Normal login token after activation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"
              examples:
                example:
                  summary: Activated
                  value:
                    need_activation: false
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    role: company_admin
                    company_id: 12
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/companies:
    post:
      tags: [Companies]
      summary: Create company (super admin)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateCompanyInput" }
            examples:
              sample:
                summary: Minimal example
                value:
                  name: "Acme Ltd"
                  admin: "acme_admin"
                  admin_real_name: "Alice Zhang"
                  contact: "ops@acme.example"
                  address: "0x9018c44fdb8d7ddcef398285512586903d3acd11"
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  company: { $ref: "#/components/schemas/Company" }
                  admin: { $ref: "#/components/schemas/User" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    get:
      tags: [Companies]
      summary: Search companies
      description: |
        View access requires one of the following roles: **super_admin**, **company_admin**, **operator**, **finance**.

        Text filters are case-insensitive and fuzzy (`ILIKE`). All non-empty filters are combined with **AND**.

        **Note:** This endpoint returns `CompanyDTO`, which exposes `admin_username` and `admin_real_name` (not the admin user ID).
      parameters:
        - in: query
          name: name
          schema: { type: string }
          description: Fuzzy match on company name.
        - in: query
          name: admin
          schema: { type: string }
          description: Fuzzy match on **admin username or real name**.
        - in: query
          name: address
          schema: { type: string }
          description: Fuzzy match on **company wallet address**.
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Companies
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/CompanyDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/companies/unused-addresses:
    get:
      tags: [Companies]
      summary: List unused company addresses (super admin)
      description: Returns the fixed pool of assignable addresses minus those already assigned to companies.
      responses:
        "200":
          description: Unused addresses
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UnusedAddressList" }
              examples:
                sample:
                  value:
                    addresses:
                      - "0x5b2e155495d2ca3fc4bb13088d77b8b15341f2d7"
                      - "0xfdc55438146f0cc7fccab36948c426f95feee4d1"
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/companies/{id}:
    get:
      tags: [Companies]
      summary: Get company detail
      description: |
        View access requires one of the following roles: **super_admin**, **company_admin**, **operator**, **finance**.

        **Note:** This endpoint returns `CompanyDTO`, which exposes `admin_username` and `admin_real_name` (not the admin user ID).
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Company detail
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CompanyDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    put:
      tags: [Companies]
      summary: Update company (super admin)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateCompanyInput" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Company" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/companies/{id}/partners:
    get:
      tags: [Companies, Partners]
      summary: List partners for a specific company
      description: |
        Returns the partner **relations** for the specified company (each row contains the partner company info).

        - **Access**: super_admin can view any; company users can view only their own company.
        - Filters are case-insensitive fuzzy (`ILIKE`) and combined with **AND**.
      parameters:
        - $ref: "#/components/parameters/PathId"
        - in: query
          name: name
          schema: { type: string }
          description: Fuzzy match on **partner company name**.
        - in: query
          name: address
          schema: { type: string }
          description: Fuzzy match on **partner company address**.
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Partners
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Partner" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/companies/{id}/partners/{pid}:
    get:
      tags: [Companies, Partners]
      summary: Get a specific partner relation for a company
      description: |
        Returns a single partner **relation** for the specified company (row contains the partner company info).

        - **Access**: `super_admin` can view any; company users can view only their own company.
      parameters:
        - $ref: "#/components/parameters/PathId"
        - in: path
          name: pid
          required: true
          schema: { type: integer, format: int64 }
          description: Partner relation ID (the relation row ID under the specified company)
      responses:
        "200":
          description: Partner relation
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Partner" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/users:
    post:
      tags: [Users]
      summary: Create user (company admin)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateUserInput" }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    get:
      tags: [Users]
      summary: Search users (company admin)
      description: |
        All text filters are case-insensitive fuzzy (`ILIKE`). Non-empty filters are combined with **AND**.
      parameters:
        - in: query
          name: role
          schema: { $ref: "#/components/schemas/RoleEnum" }
        - in: query
          name: status
          schema: { $ref: "#/components/schemas/UserStatusEnum" }
        - in: query
          name: username
          schema: { type: string }
          description: Fuzzy match on username.
        - in: query
          name: email
          schema: { type: string }
          description: Fuzzy match on email.
        - in: query
          name: real_name
          schema: { type: string }
          description: Fuzzy match on real name.
        - in: query
          name: phone
          schema: { type: string }
          description: Fuzzy match on phone.
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Users
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/User" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/users/{id}:
    get:
      tags: [Users]
      summary: Get user detail (self or company admin)
      description: |
        - A user can fetch **their own** user record.
        - Company admins can fetch users **within their company**.
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: User
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    put:
      tags: [Users]
      summary: Update user (company admin)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateUserInput" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/users/{id}/reset-password:
    post:
      tags: [Users]
      summary: Reset user password to default (company admin)
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/users/{id}/disable:
    post:
      tags: [Users]
      summary: Disable user (company admin)
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/partners:
    post:
      tags: [Partners]
      summary: Create partner (company member)
      description: |
        Creates a partner **relation** for the caller's company.

        Two modes are supported:
        - **Internal partner** (on‑platform): provide `partner_company_id` to link to an existing **company**.
        - **External partner** (off‑platform): provide `name` **and** `wallet_address` (plus optional contact fields).

        Notes:
        - External partner `wallet_address` is normalized to lowercase and must be unique per company.
        - You cannot add your own company as a partner.
        - Allowed roles: **company_admin**, **operator**, **finance**, **super_admin**.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreatePartnerInput" }
            examples:
              internal:
                summary: Link to an existing company
                value:
                  partner_company_id: 42
              external:
                summary: Create an external partner
                value:
                  name: "Shenzhen Metals Ltd"
                  contact: "Ms. Wang"
                  contact_info: "wang@example.com / +86 131 0000 0000"
                  wallet_address: "0x5b2e155495d2ca3fc4bb13088d77b8b15341f2d7"
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PartnerDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/partners/candidates:
    get:
      tags: [Partners]
      summary: List partner candidate companies (operator/company admin)
      description: |
        Returns companies that are not yet linked as partners for the caller's company.
        Excludes the caller's own company and existing internal partners.
      parameters:
        - in: query
          name: name
          schema: { type: string }
          description: Fuzzy match on company name.
        - in: query
          name: address
          schema: { type: string }
          description: Fuzzy match on company wallet address.
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Candidate companies
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/PartnerCandidate" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/partners/{id}:
    delete:
      tags: [Partners]
      summary: Delete partner (company member)
      description: Allowed roles are **company_admin**, **operator**, **finance**, **super_admin**.
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders:
    post:
      tags: [Orders]
      summary: Create order (operator/company_admin)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateOrderInput" }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    get:
      tags: [Orders]
      summary: Search orders
      description: |
        Datetime filters accept RFC3339 or `YYYY-MM-DD`. If only a date is supplied, the end boundary is exclusive of the next day.
        **Notes:**
        - `status` accepts **one or more** statuses as a comma-separated list (CSV).
      parameters:
        - in: query
          name: id
          schema: { type: integer, format: int64 }
        - in: query
          name: type
          schema: { $ref: "#/components/schemas/OrderTypeEnum" }
        - in: query
          name: status
          description: Filter by **one or more** statuses (CSV), e.g. `pending_l2_approval,pending_l1_approval`.
          required: false
          style: form
          explode: false
          schema:
            type: array
            items: { $ref: "#/components/schemas/OrderStatusEnum" }
        - in: query
          name: product_type
          schema: { $ref: "#/components/schemas/TradeProductTypeEnum" }
        - in: query
          name: q
          schema: { type: string }
          description: Fuzzy match on order name.
        - in: query
          name: partner_q
          schema: { type: string }
          description: Fuzzy match on partner name.
        - in: query
          name: created_from
          schema: { type: string, example: "2025-01-01" }
        - in: query
          name: created_to
          schema: { type: string, example: "2025-01-31" }
        - in: query
          name: submitted_from
          schema: { type: string, example: "2025-01-01T00:00:00Z" }
        - in: query
          name: submitted_to
          schema: { type: string, example: "2025-01-31T23:59:59Z" }
        - in: query
          name: approved_from
          schema: { type: string }
        - in: query
          name: approved_to
          schema: { type: string }
        - in: query
          name: paid_from
          schema: { type: string }
        - in: query
          name: paid_to
          schema: { type: string }
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Orders
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/OrderDTO" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}:
    get:
      tags: [Orders]
      summary: Order detail
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    patch:
      tags: [Orders]
      summary: Update order (pre-submission for operator; admin broader)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateOrderInput" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    delete:
      tags: [Orders]
      summary: Delete order (pre-submission only)
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/submit:
    post:
      tags: [Orders]
      summary: Submit order
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/approve-l2:
    post:
      tags: [Orders]
      summary: Approve (L2)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ApprovalNote" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/reject-l2:
    post:
      tags: [Orders]
      summary: Reject (L2)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ApprovalNote" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/approve-l1:
    post:
      tags: [Orders]
      summary: Approve (L1)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ApprovalNote" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/reject-l1:
    post:
      tags: [Orders]
      summary: Reject (L1)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ApprovalNote" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/execute:
    post:
      tags: [Orders]
      summary: Execute payment (finance; payment orders)
      description: |
        Initiates a Cobo transfer for **payment** orders after all approvals are complete.

        For LC funding, use the dedicated two-step flow:
        1. `/api/v1/orders/{id}/lc/approve`
        2. `/api/v1/orders/{id}/lc/open`

        中文说明：
        - 财务在支付提单审批完成后调用，触发Cobo转账。
        - LC开立不要用此接口，请按 `/orders/{id}/lc/approve` → `/orders/{id}/lc/open` 两步执行。
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ExecuteInput" }
      responses:
        "200":
          description: Updated order with the initiated Cobo transfer
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/lc/approve:
    post:
      tags: [Orders]
      summary: LC funding step 1 — approve USDC allowance
      description: |
        Starts the LC funding flow by approving the USDC allowance for the LC Factory contract.
        Requires the same MFA as payment execution and returns the updated order with the new `cobo_tx_id`.

        中文说明：
        - LC开立第一步，先给LC工厂合约授权USDC额度。
        - 与支付执行相同，需要密码+TOTP（可选邮件OTP）。返回值会携带新的 `cobo_tx_id`。
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ExecuteInput" }
      responses:
        "200":
          description: Updated order (approval transaction staged)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/lc/open:
    post:
      tags: [Orders]
      summary: LC funding step 2 — open LC after approval
      description: |
        Calls the LC Factory to open the escrow after the allowance approval transaction is completed.
        Fails if step 1 has not finished on-chain. Returns the updated order (status -> `pending_release`).

        中文说明：
        - LC开立第二步，在授权交易确认后调用工厂合约创建托管账户。
        - 如果第一步交易还未上链成功会报错。成功后订单状态进入 `pending_release`，等待后续第一次结算（LC放款）流程。
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ExecuteInput" }
      responses:
        "200":
          description: Updated order (escrow opened; pending release)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/mark-received:
    post:
      tags: [Orders]
      summary: Mark collection payment received (finance/company_admin)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/MarkReceivedInput" }
      responses:
        "200":
          description: Updated order (status -> payment_received)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades:
    post:
      tags: [Trades]
      summary: Create trade order (buyer company)
      description: |
        Buyer operator creates the trade record before any LC or settlement actions.
        Prerequisites:
        - Caller company must be the buyer in the platform.
        - `partner_id` should come from `/api/v1/partners`; LC is only available when the partner is an internal company.
        Result: new trade in `trade_created`, visible to both sides.

        中文说明：
        - 买方业务员在流程开始时创建贸易单。
        - 需要合作方ID（从 `/api/v1/partners` 获取）；只有内部合作方才能后续开LC。
        - 创建成功后状态为 `trade_created`，买卖双方都能看到基础信息。
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateTradeInput" }
      responses:
        "200":
          description: Created trade
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TradeDTO" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    get:
      tags: [Trades]
      summary: Search trades visible to the caller
      description: |
        Filters trades where the caller's company is the buyer or the internal seller.
        Use the `state` filter (repeatable or comma-separated) to narrow by workflow stage.
        `product_type` filters by the commodity preset and
        `lc_status` narrows trades with an escrow in that lifecycle state, and `lc_substatus` refines
        `release_proposed` escrows by whether the operator or L2 approval is pending. Pagination headers mirror
        other list endpoints.

        中文说明：
        - 只返回调用方公司是买方或内部卖方的贸易单。
        - 可重复或用逗号分隔 `state` 参数以查询多个阶段；`product_type` 限定品类，`lc_status` 查看信用证状态，分页返回格式与其他列表一致。
      parameters:
        - in: query
          name: id
          schema: { type: integer, format: int64 }
        - in: query
          name: trade_name
          schema: { type: string }
          description: Fuzzy match on trade name.
        - in: query
          name: partner_name
          schema: { type: string }
          description: Fuzzy match on partner name (internal company name or saved label).
        - in: query
          name: state
          style: form
          explode: true
          schema:
            type: array
            items: { $ref: "#/components/schemas/TradeStateEnum" }
          description: Filter trades by one or more workflow states (repeat `state` or use commas).
        - in: query
          name: product_type
          schema: { $ref: "#/components/schemas/TradeProductTypeEnum" }
          description: Exact match on the configured trade product type.
        - in: query
          name: lc_status
          schema: { $ref: "#/components/schemas/LCStatusEnum" }
          description: Filters trades whose LC escrow currently has this status.
        - in: query
          name: lc_substatus
          schema: { $ref: "#/components/schemas/LCSubstatusEnum" }
          description: |
            Filters trades where `lc_status=release_proposed` and the derived `lc_substatus` matches.
            中文：仅返回 `lc_status=release_proposed` 且派生的 `lc_substatus` 等于此值的贸易单。
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Trades
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/TradeDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}:
    get:
      tags: [Trades]
      summary: Trade detail
      description: |
        Returns the full trade object including LC status, consensus rounds, and attachment metadata.
        Use this after each action to refresh the UI state.

        中文说明：
        - 返回完整贸易单信息（含LC进度、共识轮、附件信息）。
        - 每次操作后调用以刷新前端画面。
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: Trade
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TradeDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    patch:
      tags: [Trades]
      summary: Update trade (state must be `trade_created`)
      description: |
        Buyer operator edits basic cargo or LC info before LC opening.
        Only available while `state=trade_created`; other states lock the initial fields.

        中文说明：
        - 买方业务员在开LC之前修正货物/信用证基础信息。
        - 仅在 `trade_created` 状态可用，进入后续阶段后字段会锁定。
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateTradeInput" }
      responses:
        "200":
          description: Updated trade
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TradeDTO" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}/attachments:
    get:
      tags: [Attachments]
      summary: List trade attachments
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Attachments bound to the trade
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/AttachmentDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}/attachments/init:
    post:
      tags: [Attachments]
      summary: Init S3 uploads for a trade (state must be `trade_created`)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [files]
              properties:
                files:
                  type: array
                  items: { $ref: "#/components/schemas/InitUploadSpec" }
      responses:
        "200":
          description: Presigned PUT URLs
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploads:
                    type: array
                    items: { $ref: "#/components/schemas/InitUploadResult" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}/attachments/complete:
    post:
      tags: [Attachments]
      summary: Complete S3 uploads for a trade
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { $ref: "#/components/schemas/CompleteUploadSpec" }
      responses:
        "200":
          description: Finalized attachments
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/AttachmentDTO" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}/attachments/adopt:
    post:
      tags: [Attachments]
      summary: Adopt staged files into this trade
      description: |
        Moves ready files from a staging group (via `/api/v1/attachments/groups/{key}`) into the trade.
        Only available while the trade is in `trade_created` state.
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [group_key]
              properties:
                group_key:
                  type: string
                  description: Staging group key to adopt from.
      responses:
        "200":
          description: Adopted attachments
          content:
            application/json:
              schema:
                type: object
                properties:
                  adopted:
                    type: array
                    items: { $ref: "#/components/schemas/AttachmentDTO" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}/attachments/{attid}:
    delete:
      tags: [Attachments]
      summary: Delete a trade attachment (state must be `trade_created`)
      parameters:
        - $ref: "#/components/parameters/PathId"
        - in: path
          name: attid
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}/open-lc:
    post:
      tags: [Trades]
      summary: Open on-chain LC order for the trade (buyer side)
      description: |
        Creates an `onchain_lc` order linked to the trade so finance can fund the escrow.
        Prerequisites:
        - Trade must be in `trade_created` and the seller must be an internal company.
        - Buyer operator provides `lc_name`, optional `save_and_submit=true` to send for approvals immediately.
        Result: LC order appears in the buyer workflow; follow `/api/v1/orders/{id}/lc/approve` then `/api/v1/orders/{id}/lc/open` to fund.

        中文说明：
        - 为贸易单生成一个链上LC订单，方便后续走审批与开立。
        - 需要贸易单状态为 `trade_created` 且卖方是系统内部公司。
        - 买方业务员填写 `lc_name`，`save_and_submit=true` 时立即提交审批。
        - 成功后LC订单进入订单列表，财务通过 `/orders/{id}/lc/approve` → `/orders/{id}/lc/open` 完成LC开立，然后等待后续放款流程。
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/OpenLCInput" }
      responses:
        "200":
          description: LC order created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderDTO" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}/ship-confirm:
    post:
      tags: [Trades]
      summary: Seller ship confirmation (LC flow)
      description: |
        Seller operator records shipment facts and triggers first settlement when the LC escrow holds funds.
        Prerequisites:
        - Trade state `lc_opened` (LC funded and pending release).
        - Seller provides vessel/BOL data and the first settlement amount (`first_settlement_amount`).
        Result: trade stores the seller data and waits for the buyer confirmation step.
        After buyer confirmation and on-chain release, the trade state becomes `first_settlement_done`.

        中文说明：
        - 卖方业务员提交装船信息并触发第一次结算，前提是LC托管账户已到位。
        - 需要贸易单状态为 `lc_opened`，表单中填写船名、提单号、结算金额等。
        - 提交后贸易单进入待买方确认阶段。
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ShipConfirmInput" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}/buyer-confirm-shipment:
    post:
      tags: [Trades]
      summary: Buyer confirms shipment (advances LC release)
      description: |
        Buyer operators or company admins review the seller shipment data and record the buyer decision.
        Pre-approval can be completed by an operator or company admin; final on-chain approval can be
        executed by a company admin or L2 admin once pre-approval exists. Call after reviewing the seller
        submission from `/trade/{id}` detail. Result: release workflow moves forward and finance/platform
        will trigger the on-chain payout. Once the release transaction succeeds, the trade state transitions
        to `first_settlement_done`.

        中文说明：
        - 买方业务员或公司管理员可先完成预审批（operator/company_admin）。
        - 预审批之后，公司管理员或二级管理员会在后台与链上合约交互并完成最终确认。
        - 在前端查看贸易单详情后调用即可，必要时附备注。
        - 成功后进入放款流程，财务/平台会在链上放款。
        - 放款交易成功后，贸易单状态会变为 `first_settlement_done`。
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NoteBody" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}/consensus/start:
    post:
      tags: [Trades]
      summary: Start settlement consensus round
      description: |
        Initiates a settlement consensus for round 2 (after first LC release) or round 3 (after second settlement).
        Prerequisites:
        - Round 2: trade state should be `first_settlement_done`.
        - Round 3: trade state should be `second_settlement_done`; include arrival metrics for final settlement.
        - Either buyer or seller operator can initiate; counterparty must later approve.
        Result: consensus status becomes `pending_other_approval` and awaits `/approve` or `/reject`.

        中文说明：
        - 启动第2轮或第3轮“多退少补”共识。
        - 第2轮需要贸易单已完成第一次结算（`first_settlement_done`）。
        - 第3轮需要贸易单已完成第二次结算（`second_settlement_done`），并可提交到港数据。
        - 买方或卖方业务员均可发起，状态会变为待对方审核。
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/StartConsensusInput" }
      responses:
        "200":
          description: Consensus proposal
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TradeConsensus" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}/consensus/{round}/approve:
    post:
      tags: [Trades]
      summary: Approve a consensus proposal
      description: |
        Counterparty accepts the pending consensus for round 2 or 3.
        After approval, trade state moves to `consensus2_reached` or `consensus3_reached` depending on the round.
        Next step: payer company creates a payment order or records a receipt.

        中文说明：
        - 对方公司确认当前共识内容。
        - 通过后贸易单状态分别变为 `consensus2_reached` 或 `consensus3_reached`。
        - 之后付款方需要创建支付订单或登记收款。
      parameters:
        - $ref: "#/components/parameters/PathId"
        - in: path
          name: round
          description: Consensus round to approve.
          required: true
          schema:
            type: integer
            enum: [2, 3]
      responses:
        "200":
          description: Updated consensus
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TradeConsensus" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}/create-payment:
    post:
      tags: [Trades]
      summary: Create payment order for the approved consensus in a round (payer company)
      description: |
        Generates a `payment` order linked to the trade after consensus is approved.
        Prerequisites:
        - Consensus for the requested `round` must be `approved`.
        - Caller company must match the payer side determined by the consensus (`buyer_pays`).
        - Use `save_and_submit=true` to send the payment order into the approval queue immediately.
        Result: order appears in the payer's order list; when fully executed the trade moves to the next state (`second_settlement_done` or `third_settlement_done`).

        中文说明：
        - 共识达成后由需付款的一方创建支付汇款提单。
        - 只有共识状态为已通过、且调用方就是付款方时才能创建。
        - 可设置 `save_and_submit=true` 直接提交审批；审批和付款完成后贸易单将进入下一阶段。
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateTradePaymentInput" }
      responses:
        "200":
          description: Payment order created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OrderDTO" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404":
          description: Trade or approved consensus round not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "409":
          description: Multiple approved consensus entries detected for the round
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}/consensus/{round}/record-receipt:
    post:
      tags: [Trades]
      summary: Record on-chain receipt for external seller consensus (buyer company)
      description: |
        Buyer records an external seller's on-chain repayment when consensus requires the seller to pay.
        Use when the seller is outside the platform and no payment order is created.
        The API validates that the receipt amount matches the approved consensus for the round.

        中文说明：
        - 当卖方是外部公司且需要向买方付款时，买方在链上收到款后调用此接口登记。
        - 不会生成支付提单；系统会校验金额与共识一致。
      parameters:
        - $ref: "#/components/parameters/PathId"
        - in: path
          name: round
          description: Consensus round to attach the receipt to.
          required: true
          schema:
            type: integer
            enum: [2, 3]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/RecordTradeReceiptInput" }
      responses:
        "200":
          description: Receipt recorded
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TradeReceipt" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}/consensus/{round}/reject:
    post:
      tags: [Trades]
      summary: Reject a consensus proposal (counterparty)
      description: |
        Counterparty declines the current consensus details and optionally leaves a note for the initiator.
        After rejection the initiator can adjust values via `/consensus/{round}` PATCH and resubmit.

        中文说明：
        - 对方公司不接受该共识，可附备注说明原因。
        - 发起方可用 PATCH 接口修改后再次提交。
      parameters:
        - $ref: "#/components/parameters/PathId"
        - in: path
          name: round
          description: Consensus round to reject.
          required: true
          schema:
            type: integer
            enum: [2, 3]
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NoteBody" }
      responses:
        "200":
          description: Updated consensus (status -> rejected)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TradeConsensus" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/trades/{id}/consensus/{round}:
    patch:
      tags: [Trades]
      summary: Update and resubmit a rejected consensus (initiator)
      description: |
        Initiator revises a previously rejected consensus and moves it back to `pending_other_approval`.
        Only the original initiator company may call this endpoint.

        中文说明：
        - 由共识发起方修改已被拒绝的内容，并再次提交给对方审核。
        - 只有最初的发起方公司可以调用。
      parameters:
        - $ref: "#/components/parameters/PathId"
        - in: path
          name: round
          description: Consensus round to update.
          required: true
          schema:
            type: integer
            enum: [2, 3]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateConsensusInput" }
      responses:
        "200":
          description: Resubmitted consensus
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TradeConsensus" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/attachments:
    get:
      tags: [Attachments]
      summary: List order attachments
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Attachments
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/AttachmentDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/attachments/init:
    post:
      tags: [Attachments]
      summary: Init S3 uploads for an order (S3 mode only)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [files]
              properties:
                files:
                  type: array
                  items: { $ref: "#/components/schemas/InitUploadSpec" }
      responses:
        "200":
          description: Presigned PUT URLs
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploads:
                    type: array
                    items: { $ref: "#/components/schemas/InitUploadResult" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/attachments/complete:
    post:
      tags: [Attachments]
      summary: Complete S3 uploads for an order (S3 mode only)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { $ref: "#/components/schemas/CompleteUploadSpec" }
      responses:
        "200":
          description: Finalized attachments
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/AttachmentDTO" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/attachments/adopt:
    post:
      tags: [Attachments]
      summary: Adopt staged files into this order
      description: |
        Moves **ready** files from a staging group into the given order.
        Use the Group Staging endpoints to prepare files under a `group_key`, then call this to adopt them.
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [group_key]
              properties:
                group_key:
                  type: string
                  description: Staging group key to adopt from.
      responses:
        "200":
          description: Adopted attachments
          content:
            application/json:
              schema:
                type: object
                properties:
                  adopted:
                    type: array
                    items: { $ref: "#/components/schemas/AttachmentDTO" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/orders/{id}/attachments/{attid}:
    delete:
      tags: [Attachments]
      summary: Delete an order attachment (pre-submission only)
      parameters:
        - $ref: "#/components/parameters/PathId"
        - in: path
          name: attid
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/attachments/groups/{key}:
    get:
      tags: [Attachments]
      summary: List staged attachments in a group (S3 mode only)
      parameters:
        - in: path
          name: key
          required: true
          schema: { type: string }
          description: Staging group key.
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: Staged attachments
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/AttachmentDTO" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/attachments/groups/{key}/init:
    post:
      tags: [Attachments]
      summary: Init staged uploads for a group (S3 mode only)
      parameters:
        - in: path
          name: key
          required: true
          schema: { type: string }
          description: Staging group key.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [files]
              properties:
                files:
                  type: array
                  items: { $ref: "#/components/schemas/InitUploadSpec" }
      responses:
        "200":
          description: Presigned PUT URLs
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploads:
                    type: array
                    items: { $ref: "#/components/schemas/InitUploadResult" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/attachments/groups/{key}/complete:
    post:
      tags: [Attachments]
      summary: Complete staged uploads for a group (S3 mode only)
      parameters:
        - in: path
          name: key
          required: true
          schema: { type: string }
          description: Staging group key.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items: { $ref: "#/components/schemas/CompleteUploadSpec" }
      responses:
        "200":
          description: Finalized staged attachments
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/AttachmentDTO" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/attachments/groups/{key}/{attid}:
    delete:
      tags: [Attachments]
      summary: Delete a staged attachment
      parameters:
        - in: path
          name: key
          required: true
          schema: { type: string }
        - in: path
          name: attid
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/attachments/{id}/download:
    get:
      tags: [Attachments]
      summary: Download an attachment by ID (S3)
      description: |
        Returns `{ "download_url": "..." }` — a short-lived S3 presigned URL for the file.
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: JSON with a presigned URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  download_url: { type: string }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/wallets:
    get:
      tags: [Wallets]
      summary: Company primary wallet balances
      description: |
        Returns live balances for the caller's company **primary address** via Cobo WaaS.

        - Only company-scoped users can call this endpoint (`super_admin` receives HTTP 400).
        - If `tokens` is omitted, the server defaults to `BSC_BNB,BSC_USDC`.
        - Response shape matches `/api/v1/wallets/address/{address}/balances`.
      parameters:
        - in: query
          name: tokens
          required: false
          schema: { type: string }
          description: Comma-separated token IDs to query (e.g., `BSC_BNB,BSC_USDC`).
      responses:
        "200":
          description: Balances for the caller's company primary address
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressBalancesResponse"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404":
          description: Company address not assigned to any wallet record
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "502":
          description: Upstream wallet provider error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "503":
          description: Cobo not configured on server
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  /api/v1/wallets/address/{address}/balances:
    get:
      tags: [Wallets]
      summary: Get balances for a wallet address
      description: |
        Returns on-ledger balances for the specified `address` via Cobo WaaS.

        - **Access**: `super_admin` or members of the company that owns the address.
        - If `tokens` is omitted, defaults to `BSC_BNB,BSC_USDC`.
        - Requires Cobo to be configured on the server.
      parameters:
        - in: path
          name: address
          required: true
          schema: { type: string }
          description: Wallet address (e.g., EVM address).
        - in: query
          name: tokens
          required: false
          schema: { type: string }
          description: Comma-separated token IDs to query (e.g., `BSC_BNB,BSC_USDC`).
      responses:
        "200":
          description: Balances for requested tokens
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressBalancesResponse"
              examples:
                example:
                  value:
                    address: "0x9018c44fdb8d7ddcef398285512586903d3acd11"
                    tokens: ["BSC_BNB", "BSC_USDC"]
                    balances:
                      BSC_BNB:
                        token_id: "BSC_BNB"
                        total: "1.23456789"
                        available: "1.23456789"
                      BSC_USDC:
                        token_id: "BSC_USDC"
                        total: "10000.00"
                        available: "10000.00"
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404":
          description: Address not assigned to any company
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "502":
          description: Upstream wallet provider error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "503":
          description: Cobo not configured on server
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  /api/v1/dashboard/metrics:
    get:
      tags: [Dashboard]
      summary: Dashboard KPI metrics
      description: |
        - Requires a company-scoped user; `super_admin` sessions receive HTTP 400 (`no company`).
        - Use one of `?range=monthly|quarterly|yearly`, **or** provide `start` & `end`.
        - Date/time accepts RFC3339 or `YYYY-MM-DD`.
      parameters:
        - in: query
          name: range
          schema:
            type: string
            enum: [monthly, quarterly, yearly]
        - in: query
          name: start
          schema: { type: string }
        - in: query
          name: end
          schema: { type: string }
      responses:
        "200":
          description: Metrics
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Metrics" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/dashboard/todos:
    get:
      tags: [Dashboard]
      summary: Dashboard To-Do buckets
      description: |
        Returns pending workflow items grouped by bucket for the caller's company.
        - Observer users receive an empty object because they have read-only access.
      responses:
        "200":
          description: To-Do lists by bucket
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TODOs" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/dashboard/todos/dismiss:
    post:
      tags: [Dashboard]
      summary: Dismiss a single To-Do for this login session
      description: |
        Request payload: `{ resource, id }`.
        Requires a company-scoped user; `super_admin` sessions return HTTP 400 (`no company`).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DismissRequestGeneric"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/lc/releases:
    get:
      tags: ["LC Release"]
      summary: List / search LC release queue
      parameters:
        - in: query
          name: id
          schema: { type: integer, format: int64 }
        - in: query
          name: partner_q
          schema: { type: string }
        - in: query
          name: product_type
          schema: { $ref: "#/components/schemas/TradeProductTypeEnum" }
        - in: query
          name: status
          schema:
            type: string
            enum: [await_seller_confirm, await_buyer_confirm_and_release]
        - in: query
          name: q
          schema: { type: string, description: "Fuzzy order name." }
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        "200":
          description: LC release items
          headers:
            X-Total-Count: { $ref: "#/components/headers/X-Total-Count" }
            X-Page: { $ref: "#/components/headers/X-Page" }
            X-Page-Size: { $ref: "#/components/headers/X-Page-Size" }
            X-Total-Pages: { $ref: "#/components/headers/X-Total-Pages" }
            Link: { $ref: "#/components/headers/Link" }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/ReleaseListItem" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/lc/releases/{id}:
    get:
      tags: ["LC Release"]
      summary: LC release detail
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ReleaseDetail" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/lc/releases/{id}/seller-confirm:
    post:
      tags: ["LC Release"]
      summary: Seller confirm shipment (seller-company Operator)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NoteBody" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/lc/releases/{id}/buyer-confirm:
    post:
      tags: ["LC Release"]
      summary: Buyer confirm received & request release (buyer-company Operator/Admin)
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/NoteBody" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/OkResponse" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "401": { $ref: "#/components/responses/Unauthorized" }

  /api/v1/transactions/receipts:
    get:
      summary: 收款信息列表 (Incoming receipts)
      description: Returns ledger transactions where the receiver address matches the caller's company address.
      tags: [Transactions]
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
          required: false
          description: Page number (default 1).
        - in: query
          name: page_size
          schema: { type: integer, minimum: 1, maximum: 100 }
          required: false
          description: Page size (default 20, max 100).
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: "#/components/schemas/LedgerTransaction"
        '400':
          description: Company context missing or address not configured
        '500':
          description: Internal server error

  /api/v1/transactions/{id}:
    get:
      tags: [Transactions]
      summary: Get transaction status (Cobo) & sync linked order
      description: |
        Polls a **Cobo** transaction by `id`, updates the linked order in the database, and returns a compact status payload for the frontend to display.

        - Authorization equals **order:view** on the linked order.
        - Intended for polling after initiating a payment transfer (when `OrderDTO.cobo_tx_id` is present).
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: Cobo `transaction_id`.
      responses:
        "200":
          description: Transaction status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionStatus"
              examples:
                example:
                  value:
                    order_id: 123
                    transaction_id: "tx_26d7c2..."
                    status: "Completed"
                    transaction_hash: "0xabc123...def"
                    order_status: "payment_completed"
                    completed: true
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404":
          description: Transaction ID not linked to any order
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "502":
          description: Upstream/unknown error when querying Cobo
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "503":
          description: Cobo not configured on server
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    PathId:
      in: path
      name: id
      required: true
      schema: { type: integer, format: int64 }
    Page:
      in: query
      name: page
      required: false
      description: 1-based page index.
      schema:
        type: integer
        minimum: 1
        default: 1
    PageSize:
      in: query
      name: page_size
      required: false
      description: Number of items per page (maximum 100).
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  headers:
    X-Total-Count:
      description: Total number of items matching the filter.
      schema: { type: integer, format: int64 }
    X-Page:
      description: Current page (1-based).
      schema: { type: integer, minimum: 1 }
    X-Page-Size:
      description: Page size used to generate the response.
      schema: { type: integer, minimum: 1 }
    X-Total-Pages:
      description: Total number of pages.
      schema: { type: integer, minimum: 0 }
    Link:
      description: 'RFC 5988 "Link" header with pagination links (rel="first", "prev", "next", "last") when applicable.'
      schema: { type: string }
      example: '<http://nova-api.sgusd.io/api/v1/orders?page=2&page_size=20>; rel="next", <http://nova-api.sgusd.io/api/v1/orders?page=10&page_size=20>; rel="last"'

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    Unauthorized:
      description: Missing/invalid token
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    Forbidden:
      description: Forbidden by policy
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }

  schemas:
    # ===== Common =====
    OkResponse:
      type: object
      properties:
        ok: { type: boolean, example: true }
    ErrorResponse:
      type: object
      properties:
        error: { type: string }
    ApprovalNote:
      type: object
      properties:
        note:
          type: string
          description: Optional note
    NoteBody:
      type: object
      properties:
        note: { type: string }
    RoleEnum:
      type: string
      enum:
        [
          super_admin,
          company_admin,
          operator,
          l1_admin,
          l2_admin,
          finance,
          observer,
        ]
    UserStatusEnum:
      type: string
      enum: [pending_activation, normal, disabled]
    OrderTypeEnum:
      type: string
      enum: [payment, onchain_lc, collection]
    OrderStatusEnum:
      type: string
      enum:
        - pending_submission
        - pending_l2_approval
        - pending_l1_approval
        - pending_payment
        - pending_release
        - submitted
        - payment_received
        - payment_completed
        - order_closed
    LCStatusEnum:
      type: string
      enum: [active, release_proposed, buyer_approved, released, settled]
      description: "LC state as emitted by the escrow smart contract. The indexer advances these states only after the configured block confirmations."
    LCSubstatusEnum:
      type: string
      enum: [pending_operator_approval, pending_l2_approval]
      description: |
        LC release workflow step when `lc_status=release_proposed`.
        中文：`lc_status=release_proposed` 时的LC释放流程节点。
    TradeProductTypeEnum:
      type: string
      enum: [pilbara_blend_fines, newman_fines, carajas_fines]
    TradeStateEnum:
      type: string
      enum:
        - trade_created
        - lc_opened
        - first_settlement_done
        - consensus2_reached
        - second_settlement_done
        - consensus3_reached
        - third_settlement_done
    TradeConsensusStatusEnum:
      type: string
      enum: [pending_other_approval, approved, rejected]

    # ===== Enums =====
    EnumItem:
      type: object
      properties:
        value:
          type: string
          description: Stable enum value used by the API
        label:
          type: string
          description: English label for UI
        label_zh:
          type: string
          description: Chinese label for UI
        description:
          type: string
          description: Optional description/tooltips
        tag_color:
          type: string
          description: Optional hex color (e.g., "#1890ff") for UI badges.

    EnumsResponse:
      type: object
      properties:
        roles:
          type: array
          items: { $ref: "#/components/schemas/EnumItem" }
        user_status:
          type: array
          items: { $ref: "#/components/schemas/EnumItem" }
        order_types:
          type: array
          items: { $ref: "#/components/schemas/EnumItem" }
        order_status:
          type: array
          items: { $ref: "#/components/schemas/EnumItem" }
        product_types:
          type: array
          items: { $ref: "#/components/schemas/EnumItem" }
        trade_states:
          type: array
          items: { $ref: "#/components/schemas/EnumItem" }
        lc_release_status:
          type: array
          items: { $ref: "#/components/schemas/EnumItem" }

    # ===== Auth =====
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username: { type: string }
        password: { type: string }
    LoginResult:
      type: object
      required: [need_activation]
      properties:
        need_activation:
          type: boolean
          description: true when the user must complete activation before normal use
        token:
          type: string
          description: JWT token (short-lived when `need_activation=true`, normal otherwise)
        session:
          type: string
          description: Session nonce (present on `/auth/login` responses for both flows; used for this login session and internally during activation)
        role:
          $ref: "#/components/schemas/RoleEnum"
        company_id:
          type: integer
          format: int64
          nullable: true
          description: Company ID associated with the user; null for super_admin.

    InitActivationResponse:
      type: object
      required: [totp_secret, otpauth_url, issuer, account]
      properties:
        totp_secret:
          type: string
          description: Base32 secret to be stored in the authenticator app (show to the user once)
        otpauth_url:
          type: string
          description: The `otpauth://` provisioning URL; render this as a QR or call `/auth/totp-qr`
        issuer:
          type: string
          example: NOVA TRADE
        account:
          type: string
          description: Usually the username; appears as the account label in the authenticator

    ActivateRequest:
      type: object
      required: [new_password, email, totp_code]
      properties:
        new_password:
          type: string
          description: New password to set during activation
        email:
          type: string
          format: email
          description: Email to bind to the account
        totp_code:
          type: string
          description: 6-digit code from the authenticator app

    # ===== Companies =====
    Company:
      type: object
      properties:
        id: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        name: { type: string }
        admin: { type: integer, format: int64, nullable: true }
        contact: { type: string }
        address:
          type: string
          description: "Company wallet address (unique; assigned from a fixed pool)."
        created_by: { type: integer, format: int64 }
    CreateCompanyInput:
      type: object
      required: [name, admin, contact, address]
      properties:
        name: { type: string }
        admin:
          type: string
          description: Admin username to create for this company.
        admin_real_name:
          type: string
          nullable: true
          description: Optional real name for the newly created admin user.
        contact: { type: string }
        address:
          type: string
          description: "Must be one of the unused addresses from `/api/v1/companies/unused-addresses`."
          enum:
            - "0x9018c44fdb8d7ddcef398285512586903d3acd11"
            - "0x5b2e155495d2ca3fc4bb13088d77b8b15341f2d7"
            - "0xfdc55438146f0cc7fccab36948c426f95feee4d1"
    UpdateCompanyInput:
      type: object
      description: Address is not editable via this endpoint.
      properties:
        name: { type: string, nullable: true }
        contact: { type: string, nullable: true }
        admin: { type: integer, format: int64, nullable: true }
    CompanyDTO:
      type: object
      description: Company view model returned by list/detail endpoints.
      properties:
        id: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        name: { type: string }
        contact: { type: string }
        address:
          type: string
          description: "Company wallet address (unique; assigned from a fixed pool)."
        created_by: { type: integer, format: int64 }
        admin_username:
          type: string
          nullable: true
          description: Username of the company admin (if assigned).
        admin_real_name:
          type: string
          nullable: true
          description: Real name of the company admin (if assigned).

    UnusedAddressList:
      type: object
      properties:
        addresses:
          type: array
          items: { type: string }

    # ===== Users =====
    User:
      type: object
      properties:
        id: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        username: { type: string }
        real_name: { type: string }
        email: { type: string }
        phone: { type: string }
        role: { $ref: "#/components/schemas/RoleEnum" }
        status: { $ref: "#/components/schemas/UserStatusEnum" }
        company_id: { type: integer, format: int64, nullable: true }
        must_change:
          type: boolean
          description: true when the user must change password on next login (not included in `/auth/me`)
    CurrentUser:
      type: object
      properties:
        id: { type: integer, format: int64 }
        username: { type: string }
        real_name: { type: string }
        email: { type: string }
        phone: { type: string }
        role: { $ref: "#/components/schemas/RoleEnum" }
        status: { $ref: "#/components/schemas/UserStatusEnum" }
        company_id:
          type: integer
          format: int64
          nullable: true
          description: Null for `super_admin` sessions.
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    CreateUserInput:
      type: object
      required: [username, real_name, email, phone, role]
      properties:
        username: { type: string }
        real_name: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        role:
          allOf: [{ $ref: "#/components/schemas/RoleEnum" }]
          description: Must be a company-level role (one of company_admin, operator, l1_admin, l2_admin, finance, observer).
    UpdateUserInput:
      type: object
      properties:
        real_name: { type: string, nullable: true }
        email: { type: string, format: email, nullable: true }
        phone: { type: string, nullable: true }
        role: { $ref: "#/components/schemas/RoleEnum" }
        status: { $ref: "#/components/schemas/UserStatusEnum" }

    # ===== Partners =====
    Partner:
      type: object
      description: Partner **relation** between the caller's company and a partner **company**.
      properties:
        id: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        company_id:
          {
            type: integer,
            format: int64,
            description: "Owner company ID (the caller's company).",
          }
        partner_company_id:
          {
            type: integer,
            format: int64,
            description: "The partner company ID.",
          }
        partner_company_name:
          { type: string, description: "Resolved from the partner company." }
        partner_company_address:
          {
            type: string,
            description: "Resolved wallet address from the partner company.",
          }
        created_by: { type: integer, format: int64 }
    # Create partner now supports two modes: internal (link to company) OR external (freeform).
    CreatePartnerInput:
      oneOf:
        - $ref: "#/components/schemas/CreatePartnerInternal"
        - $ref: "#/components/schemas/CreatePartnerExternal"
      description: |
        One of:
        - **Internal**: link to an existing company using `partner_company_id`.
        - **External**: provide `name` and `wallet_address` (plus optional contact fields).

    CreatePartnerInternal:
      type: object
      required: [partner_company_id]
      properties:
        partner_company_id:
          type: integer
          format: int64
          minimum: 1
          description: "Existing company ID to link as partner (cannot be your own company)."

    CreatePartnerExternal:
      type: object
      required: [name, wallet_address]
      properties:
        name:
          type: string
          description: "Partner name."
        contact:
          type: string
          description: "Contact person (optional)."
        contact_info:
          type: string
          description: "Contact info (optional)."
        wallet_address:
          type: string
          description: "Partner wallet address (normalized to lowercase; unique per company)."

    PartnerDTO:
      type: object
      description: Partner view returned when creating a partner. Supports internal and external partners.
      properties:
        id: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        company_id: { type: integer, format: int64 }
        # Internal partner linkage (nullable for external partners)
        partner_company_id:
          type: integer
          format: int64
          nullable: true
        partner_company_name:
          type: string
          nullable: true
        partner_company_address:
          type: string
          nullable: true
        # External partner fields (also populated for internal for convenience)
        name: { type: string }
        contact: { type: string }
        contact_info: { type: string }
        wallet_address: { type: string }
        created_by: { type: integer, format: int64 }

    PartnerCandidate:
      type: object
      description: Minimal company record returned by `/api/v1/partners/candidates`.
      required: [id, name, address]
      properties:
        id: { type: integer, format: int64 }
        name: { type: string }
        address: { type: string }

    # ===== Orders =====
    ExecInfo:
      type: object
      properties:
        company_wallet_address: { type: string }
        company_wallet_balance:
          type: string
          description: "Human readable with thousands separators."
        recipient_wallet_address: { type: string }
    OrderDTO:
      type: object
      properties:
        id: { type: integer, format: int64 }
        company_id: { type: integer, format: int64 }
        type: { $ref: "#/components/schemas/OrderTypeEnum" }
        status: { $ref: "#/components/schemas/OrderStatusEnum" }
        name: { type: string }
        product_type: { $ref: "#/components/schemas/TradeProductTypeEnum" }
        partner_id: { type: integer, format: int64 }
        partner_wallet: { type: string }
        partner_name:
          type: string
          description: "Display name resolved from partner/company record."
        amount_minor: { type: integer, format: int64 }
        amount:
          type: string
          description: "Human readable with thousands separators."
        asset: { type: string }
        description: { type: string }
        submitter_id: { type: integer, format: int64, nullable: true }
        submitted_at: { type: string, format: date-time, nullable: true }
        finance_id: { type: integer, format: int64, nullable: true }
        approved_at: { type: string, format: date-time, nullable: true }
        payment_done_at: { type: string, format: date-time, nullable: true }
        tx_hash: { type: string }
        tx_url: { type: string }
        # live Cobo tracking for payment orders
        cobo_tx_id:
          type: string
          description: Present when a real Cobo transfer was initiated; poll `/api/v1/transactions/{id}`.
        cobo_tx_status:
          type: string
          description: 'Last known Cobo status for `cobo_tx_id` (e.g., "Pending", "Completed").'
        # LC extras
        lc_funding_tx_hash: { type: string }
        lc_funding_tx_url: { type: string }
        lc_release_tx_hash: { type: string }
        lc_release_tx_url: { type: string }
        lc_status:
          $ref: "#/components/schemas/LCStatusEnum"
          description: |-
            Current on-chain LC status. Populated by the event indexer after block confirmations.
        attachments:
          type: array
          items: { type: string }
        created_by: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        execution_info:
          $ref: "#/components/schemas/ExecInfo"
          nullable: true
    CreateOrderInput:
      type: object
      required: [type, name, product_type, partner_id, amount]
      properties:
        type: { $ref: "#/components/schemas/OrderTypeEnum" }
        name: { type: string }
        product_type:
          $ref: "#/components/schemas/TradeProductTypeEnum"
        partner_id: { type: integer, format: int64 }
        amount: { type: string, description: "Decimal string" }
        asset:
          type: string
          example: USDC
          description: "Optional; defaults to server's DEFAULT_ASSET."
        description: { type: string }
        save_and_submit: { type: boolean }
        save_as_draft: { type: boolean }
        attachment_group_key:
          type: string
          description: |
            Optional staging group key. If provided, ready files from `/api/v1/attachments/groups/{key}`
            will be adopted into this order after creation.
    UpdateOrderInput:
      type: object
      properties:
        name: { type: string, nullable: true }
        product_type: { $ref: "#/components/schemas/TradeProductTypeEnum" }
        partner_id: { type: integer, format: int64, nullable: true }
        amount: { type: string, nullable: true }
        asset: { type: string, nullable: true }
        description: { type: string, nullable: true }
    ExecuteInput:
      type: object
      required: [password, totp]
      properties:
        password: { type: string }
        totp: { type: string }
        email_otp:
          type: string
          description: Optional email OTP (reserved; currently ignored if provided).
    MarkReceivedInput:
      type: object
      required: [tx_hash]
      properties:
        tx_hash: { type: string }

    # ===== Trades =====
    TradeDTO:
      type: object
      description: |
        Trade view returned by list/detail endpoints.
        中文：贸易单详情返回结构。
      properties:
        id: { type: integer, format: int64 }
        buyer_company_id: { type: integer, format: int64 }
        seller_company_id: { type: integer, format: int64, nullable: true }
        partner_id: { type: integer, format: int64 }
        partner_name:
          type: string
          description: |
            Partner display name resolved from the partner relation.
            中文：合作方名称（来自合作方关系）。
        name: { type: string }
        product_type: { $ref: "#/components/schemas/TradeProductTypeEnum" }
        nominated_wmt: { type: string }
        base_cargo_value_minor:
          type: string
          description: USDC minor units (stringified integer).
        base_cargo_value:
          type: string
          description: Human readable base cargo value with thousands separators.
        margin_bps: { type: integer }
        lc_amount_minor:
          type: string
          description: LC amount in USDC minor units (stringified integer).
        lc_amount:
          type: string
          description: Human readable LC amount with thousands separators.
        lc_issue_date: { type: string, format: date-time, nullable: true }
        lc_expiry_date: { type: string, format: date-time, nullable: true }
        days_to_present: { type: integer }
        description: { type: string }
        state:
          allOf: [{ $ref: "#/components/schemas/TradeStateEnum" }]
          description: |
            Workflow state (`trade_created`, `lc_opened`, ...).
            中文：贸易流程状态（如 `trade_created`、`lc_opened` 等）。
        consensus:
          type: object
          nullable: true
          description: |
            Latest consensus proposals for reconciliation rounds 2 and 3.
            中文：回合2与回合3的最新结算共识详情。
          properties:
            round2:
              allOf: [{ $ref: "#/components/schemas/TradeConsensusDTO" }]
            round3:
              allOf: [{ $ref: "#/components/schemas/TradeConsensusDTO" }]
        lc_order_id:
          type: integer
          format: int64
          nullable: true
          description: |
            Related LC order ID (null when LC not created).
            中文：关联的LC订单ID（未开LC则为空）。
        lc_status:
          $ref: "#/components/schemas/LCStatusEnum"
          description: |
            Current on-chain LC status when an LC order is linked.
            中文：关联LC订单时的链上信用证状态。
        lc_substatus:
          allOf: [{ $ref: "#/components/schemas/LCSubstatusEnum" }]
          description: |
            Additional LC release step detail when `lc_status=release_proposed`.
            中文：当 `lc_status=release_proposed` 时的释放子状态。
        lc_funding_tx_hash: { type: string }
        lc_funding_tx_url: { type: string }
        lc_release_tx_hash: { type: string }
        lc_release_tx_url: { type: string }
        lc_offchain_id:
          type: string
          description: |
            Bytes32 identifier (0x-prefixed) derived from the LC order for on-chain tracking.
            中文：LC订单生成的0x前缀链上标识。
        lc_escrow_address:
          type: string
          description: |
            On-chain escrow contract address for the LC.
            中文：LC对应的链上托管合约地址。
        ship_vessel_name: { type: string }
        ship_departure_date: { type: string, format: date-time, nullable: true }
        bill_of_lading_no: { type: string }
        loaded_wmt: { type: string }
        loaded_dmt: { type: string }
        load_port_moisture_bps: { type: integer }
        fe_content: { type: string }
        price: { type: string }
        load_port_quality_iron_bps: { type: integer }
        first_settlement_amount_minor:
          type: string
          description: First settlement amount in USDC minor units.
        first_settlement_amount:
          type: string
          description: Human readable first settlement amount with thousands separators.
        ship_note: { type: string }
        arrival_date: { type: string, format: date-time, nullable: true }
        unload_wmt: { type: string }
        unload_iron_bps: { type: integer }
        unload_moisture_bps: { type: integer }
        final_iron_bps: { type: integer }
        final_dmt: { type: string }
        created_by: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    CreateTradeInput:
      type: object
      required:
        [
          partner_id,
          name,
          product_type,
          nominated_wmt,
          base_cargo_value,
          margin_bps,
          days_to_present,
        ]
      properties:
        partner_id:
          type: integer
          format: int64
          description: |
            Partner relation ID from `/api/v1/partners`.
            中文：合作方ID，来自 `/api/v1/partners`。关联内部公司时可继续LC流程。
        name:
          type: string
          description: |
            Trade title displayed in lists and dashboards.
            中文：贸易单标题，展示在列表与待办里。
        product_type:
          allOf: [{ $ref: "#/components/schemas/TradeProductTypeEnum" }]
          description: |
            Enumerated product category (Pilbara / Newman / Carajas fines).
            中文：贸易货物品种枚举，仅可填 PB粉/纽曼粉/卡粉。
        nominated_wmt:
          type: string
          description: |
            Planned wet metric tonnage; keep as string to preserve decimals.
            中文：计划装船量（湿吨），用字符串保持精度。
        base_cargo_value:
          type: string
          description: |
            Cargo value before margin, decimal USDC string (e.g., "1000000").
            中文：基础货值（USDC 十进制字符串，如 “1000000”）。
        margin_bps:
          type: integer
          description: |
            Margin in basis points added to the base cargo value. LC amount = base value × (1 + margin / 10000).
            中文：保证金比例（基点）。LC金额 = 基础货值 × (1 + 保证金/10000)。
        lc_issue_date:
          type: string
          format: date-time
          nullable: true
          description: |
            Optional LC issue date (not validated by backend).
            中文：信用证开立日期（可选，后端不校验）。
        lc_expiry_date:
          type: string
          format: date-time
          nullable: true
          description: |
            Optional LC expiry date.
            中文：信用证到期日期（可选）。
        days_to_present:
          type: integer
          description: |
            Days allowed for the seller to present documents.
            中文：卖方交单期限（天数）。
        description:
          type: string
          description: |
            Remarks visible to both parties.
            中文：双方可见的备注说明。
    UpdateTradeInput:
      type: object
      properties:
        name: { type: string, nullable: true }
        product_type:
          allOf: [{ $ref: "#/components/schemas/TradeProductTypeEnum" }]
          nullable: true
        nominated_wmt: { type: string, nullable: true }
        base_cargo_value: { type: string, nullable: true }
        margin_bps: { type: integer, nullable: true }
        lc_issue_date: { type: string, format: date-time, nullable: true }
        lc_expiry_date: { type: string, format: date-time, nullable: true }
        days_to_present: { type: integer, nullable: true }
        description: { type: string, nullable: true }
    OpenLCInput:
      type: object
      required: [lc_name]
      properties:
        lc_name:
          type: string
          description: |
            Display name for the LC order (e.g., "LC ACME → SELLCO #1").
            中文：LC订单名称，例如 “LC ACME → SELLCO #1”。
        save_and_submit:
          type: boolean
          description: |
            Submit the generated LC order immediately when true.
            中文：为 `true` 时立即提交LC订单进入审批流程。
    ShipConfirmInput:
      type: object
      description: |
        Seller shipment submission for the first settlement.
        中文：卖方在第一次结算时提交的装船信息。
      required:
        - vessel_name
        - bill_of_lading_no
        - loaded_wmt
        - loaded_dmt
        - load_port_moisture_bps
        - fe_content
        - price
        - load_port_quality_iron_bps
        - first_settlement_amount
      properties:
        vessel_name:
          type: string
          description: |
            Vessel name shown on shipping docs.
            中文：船名。
        departure_date:
          type: string
          format: date-time
          nullable: true
          description: |
            Actual departure date (optional).
            中文：实际开船日期（可选）。
        bill_of_lading_no:
          type: string
          description: |
            Bill of Lading (B/L) number.
            中文：提单号。
        loaded_wmt:
          type: string
          description: |
            Loaded wet metric tonnage.
            中文：实际装船量（湿吨）。
        loaded_dmt:
          type: string
          description: |
            Loaded dry metric tonnage.
            中文：实际装船量（干吨）。
        load_port_moisture_bps:
          type: integer
          description: |
            Moisture at load port in basis points.
            中文：装港水分（基点）。
        fe_content:
          type: string
          description: |
            Iron content reported at load port.
            中文：装港铁含量。
        price:
          type: string
          description: |
            Price used for first settlement, decimal string.
            中文：第一次结算价格（十进制字符串）。
        load_port_quality_iron_bps:
          type: integer
          description: |
            Quality inspection iron content (basis points).
            中文：装港品质化验铁含量（基点）。
        first_settlement_amount:
          type: string
          description: |
            Decimal USDC amount moved during the first settlement.
            中文：第一次结算应支付的金额（USDC十进制字符串）。
        note:
          type: string
          description: |
            Optional remark for buyer reference.
            中文：可选备注，给买方查看。
    StartConsensusInput:
      type: object
      description: |
        Settlement consensus payload for round 2 or 3.
        中文：第2/第3轮多退少补共识请求体。
      required: [round, buyer_pays, amount]
      properties:
        round:
          type: integer
          enum: [2, 3]
          description: |
            Settlement round (2 = second settlement, 3 = third settlement).
            中文：结算轮次（2=第二次结算，3=第三次结算）。
        buyer_pays:
          type: boolean
          description: |
            true when the buyer pays the seller; false when the seller pays the buyer.
            中文：为 true 时买方付款，为 false 时卖方付款。
        amount:
          type: string
          description: |
            Consensus amount as a decimal USDC string.
            中文：共识金额（USDC十进制字符串）。
        note:
          type: string
          description: |
            Optional explanation for the counterparty.
            中文：可选说明，告知对方原因。
        attachment_group_key:
          type: string
          description: |
            Optional staging group key for attachments (currently ignored).
            中文：可选附件分组键（当前忽略）。
        arrival_date:
          type: string
          format: date-time
          nullable: true
          description: |
            Arrival date (round 3 only).
            中文：到港日期（仅第3轮使用）。
        unload_wmt:
          type: string
          nullable: true
          description: |
            Unloaded wet metric tonnage.
            中文：实际卸货量（湿吨）。
        unload_iron_bps:
          type: integer
          nullable: true
          description: |
            Unload port iron content in basis points.
            中文：卸港铁含量（基点）。
        unload_moisture_bps:
          type: integer
          nullable: true
          description: |
            Unload port moisture in basis points.
            中文：卸港水分（基点）。
        final_iron_bps:
          type: integer
          nullable: true
          description: |
            Final averaged iron content (basis points).
            中文：最终铁含量平均值（基点）。
        final_dmt:
          type: string
          nullable: true
          description: |
            Final dry metric tonnage.
            中文：最终干吨数。
    CreateTradePaymentInput:
      type: object
      required: [round, order_name]
      properties:
        round:
          type: integer
          enum: [2, 3]
          description: |
            Target consensus round for the payment order.
            中文：支付订单对应的共识轮次。
        order_name:
          type: string
          description: |
            Order title shown in the payment list.
            中文：支付提单名称。
        save_and_submit:
          type: boolean
          description: |
            Submit the payment order immediately when true.
            中文：为 true 时立即提交审批。
    RecordTradeReceiptInput:
      type: object
      required: [tx_hash]
      properties:
        tx_hash:
          type: string
          description: |
            On-chain transaction hash recorded as proof of payment.
            中文：链上交易哈希，用作付款凭证。
    TradeConsensus:
      type: object
      properties:
        id: { type: integer, format: int64 }
        trade_id: { type: integer, format: int64 }
        round:
          type: integer
          enum: [2, 3]
        initiator_company_id: { type: integer, format: int64 }
        buyer_pays: { type: boolean }
        amount_minor:
          type: string
          description: Consensus amount in USDC minor units (stringified integer).
        note: { type: string }
        status: { $ref: "#/components/schemas/TradeConsensusStatusEnum" }
        approved_at: { type: string, format: date-time, nullable: true }
        approver_company_id: { type: integer, format: int64, nullable: true }
        rejected_at: { type: string, format: date-time, nullable: true }
        reject_note: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    TradeConsensusDTO:
      allOf:
        - $ref: "#/components/schemas/TradeConsensus"
        - type: object
          properties:
            amount:
              type: string
              description: |
                Human readable consensus amount with thousands separators.
                中文：带千位分隔符的人类可读共识金额。
    TradeReceipt:
      type: object
      properties:
        id: { type: integer, format: int64 }
        trade_id: { type: integer, format: int64 }
        round:
          type: integer
          enum: [2, 3]
        amount_minor:
          type: string
          description: Receipt amount in USDC minor units (stringified integer).
        asset: { type: string }
        tx_hash: { type: string }
        recorded_by: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    UpdateConsensusInput:
      type: object
      properties:
        buyer_pays: { type: boolean, nullable: true }
        amount: { type: string, nullable: true }
        note: { type: string, nullable: true }
        arrival_date: { type: string, format: date-time, nullable: true }
        unload_wmt: { type: string, nullable: true }
        unload_iron_bps: { type: integer, nullable: true }
        unload_moisture_bps: { type: integer, nullable: true }
        final_iron_bps: { type: integer, nullable: true }
        final_dmt: { type: string, nullable: true }

    # ===== Attachments =====
    AttachmentDTO:
      type: object
      properties:
        id: { type: integer, format: int64 }
        file_name: { type: string }
        size_bytes: { type: integer, format: int64 }
        content_type: { type: string }
        status: { type: string, enum: [uploading, ready, deleted] }
    InitUploadSpec:
      type: object
      required: [file_name]
      properties:
        file_name:
          type: string
          description: "Will be sanitized to basename and safe characters."
        content_type: { type: string, default: application/octet-stream }
        size: { type: integer, format: int64, minimum: 0 }
    InitUploadResult:
      type: object
      properties:
        attachment_id: { type: integer, format: int64 }
        key: { type: string, description: "S3 object key" }
        put_url: { type: string, description: "Presigned PUT URL" }
        headers:
          type: object
          additionalProperties: { type: string }
          description: "Headers that MUST be sent along with the PUT (e.g., SSE-KMS)."
        expires_in: { type: integer, example: 300 }
    CompleteUploadSpec:
      type: object
      required: [attachment_id]
      properties:
        attachment_id: { type: integer, format: int64 }
        checksum_sha256:
          type: string
          description: Optional client-computed checksum (hex).

    # ===== Wallets =====
    Wallet:
      type: object
      properties:
        id: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        address: { type: string }
        asset: { type: string }
        balance_minor: { type: integer, format: int64 }
        last_op_at: { type: string, format: date-time }
        company_id: { type: integer, format: int64, nullable: true }

    TokenBalance:
      type: object
      properties:
        token_id: { type: string }
        total:
          type: string
          description: Total balance as a decimal string.
        available:
          type: string
          description: Spendable balance as a decimal string.
        pending:
          type: string
          nullable: true
          description: Pending balance, when provided by the provider.
        locked:
          type: string
          nullable: true
          description: Locked balance, when provided by the provider.

    AddressBalancesResponse:
      type: object
      properties:
        address: { type: string }
        tokens:
          type: array
          items: { type: string }
        balances:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/TokenBalance"

    # ===== Dashboard =====
    Metrics:
      type: object
      properties:
        total_orders: { type: integer, format: int64 }
        total_payments:
          type: string
          description: "Sum in default asset, human readable"
        total_receipts:
          type: string
          description: "Sum in default asset, human readable"
    TODOItem:
      type: object
      properties:
        id: { type: integer, format: int64 }
        name: { type: string }
        amount: { type: string }
        status: { type: string }
        time: { type: string }
    TODOs:
      type: object
      properties:
        pending_submission:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
        pending_l2_approval:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
        pending_l1_approval:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
        rejected_awaiting_action:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
        pending_payment:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
        receipts_pending_payer:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
        lc_wait_seller_confirm:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
        lc_wait_buyer_confirm_and_release:
          type: array
          items: { $ref: "#/components/schemas/TODOItem" }
    DismissRequestGeneric:
      type: object
      required: [resource, id]
      properties:
        resource:
          type: string
          enum: [order, collection, lc]
        id: { type: integer, format: int64 }

    # ===== LC Release =====
    ReleaseListItem:
      type: object
      properties:
        order_id: { type: integer, format: int64 }
        name: { type: string }
        product_type: { $ref: "#/components/schemas/TradeProductTypeEnum" }
        partner: { type: string }
        escrow_address: { type: string }
        escrow_address_url: { type: string }
        amount_minor: { type: integer, format: int64 }
        amount: { type: string }
        asset: { type: string }
        status:
          type: string
          enum: [await_seller_confirm, await_buyer_confirm_and_release]
        status_label:
          type: string
          example: "待卖方确认发货"
        escrow_status:
          $ref: "#/components/schemas/LCStatusEnum"
          description: "On-chain LC state; updated once the indexer observes the corresponding event (with confirmation delay)."
    Order:
      type: object
      properties:
        id: { type: integer, format: int64 }
        company_id: { type: integer, format: int64 }
        seller_company_id: { type: integer, format: int64, nullable: true }
        type: { $ref: "#/components/schemas/OrderTypeEnum" }
        status: { $ref: "#/components/schemas/OrderStatusEnum" }
        name: { type: string }
        product_type: { $ref: "#/components/schemas/TradeProductTypeEnum" }
        partner_id: { type: integer, format: int64 }
        partner_wallet: { type: string }
        partner_name:
          type: string
          description: "Display name resolved from partner/company record."
        amount_minor: { type: integer, format: int64 }
        asset: { type: string }
        description: { type: string }
        submitter_id: { type: integer, format: int64, nullable: true }
        submitted_at: { type: string, format: date-time, nullable: true }
        finance_id: { type: integer, format: int64, nullable: true }
        approved_at: { type: string, format: date-time, nullable: true }
        payment_done_at: { type: string, format: date-time, nullable: true }
        tx_hash: { type: string }
        created_by: { type: integer, format: int64 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    Escrow:
      type: object
      properties:
        id: { type: integer, format: int64 }
        order_id: { type: integer, format: int64 }
        address: { type: string }
        amount_minor: { type: integer, format: int64 }
        status:
          $ref: "#/components/schemas/LCStatusEnum"
          description: "On-chain LC state; absent when activation has not been observed yet."
        tx_hash: { type: string }
        seller_confirmed_at: { type: string, format: date-time, nullable: true }
        seller_admin_id: { type: integer, format: int64, nullable: true }
        seller_note: { type: string }
        buyer_confirmed_at: { type: string, format: date-time, nullable: true }
        buyer_admin_id: { type: integer, format: int64, nullable: true }
        buyer_note: { type: string }
        platform_confirmed_at:
          { type: string, format: date-time, nullable: true }
        platform_admin_id: { type: integer, format: int64, nullable: true }
        platform_note: { type: string }
        release_tx_hash: { type: string }
        release_tx_at: { type: string, format: date-time, nullable: true }
    ReleaseDetail:
      type: object
      properties:
        order: { $ref: "#/components/schemas/Order" }
        partner: { type: string }
        escrow: { $ref: "#/components/schemas/Escrow" }
        funding_tx_url: { type: string }
        release_tx_url: { type: string }

    # ===== Transactions =====
    TransactionStatus:
      type: object
      properties:
        order_id:
          type: integer
          format: int64
        transaction_id:
          type: string
          description: Cobo transaction ID.
        status:
          type: string
          description: 'Cobo status (e.g., "Pending", "Completed", "Failed").'
        transaction_hash:
          type: string
          description: On-chain transaction hash when available.
        order_status:
          $ref: "#/components/schemas/OrderStatusEnum"
        completed:
          type: boolean
          description: true when the transaction is completed and the order has been auto-advanced (if applicable).
    LedgerTransaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          description: Ledger transaction type (cobo_transfer | lc_release).
        cobo_tx_id:
          type: string
          nullable: true
        tx_hash:
          type: string
        chain:
          type: string
        block_number:
          type: integer
          format: int64
        included_at:
          type: string
          format: date-time
          nullable: true
        sender_address:
          type: string
        receiver_address:
          type: string
        token_address:
          type: string
        token_symbol:
          type: string
        token_name:
          type: string
        token_decimals:
          type: integer
          format: int32
        amount_minor:
          type: string
          description: Amount in minor units (as decimal string).
        amount:
          type: string
          description: Human readable amount rendered with token decimals.
        status:
          type: string
          description: Latest known Cobo status.
        status_checked_at:
          type: string
          format: date-time
          nullable: true
        order_id:
          type: integer
          format: int64
          nullable: true
